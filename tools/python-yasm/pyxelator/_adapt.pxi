# code autogenerated from ./cgen.py

cdef class _CChar(_CObject)
cdef class _CSChar(_CObject)
cdef class _CUChar(_CObject)
cdef class _CShort(_CObject)
cdef class _CUShort(_CObject)
cdef class _CInt(_CObject)
cdef class _CUInt(_CObject)
cdef class _CLong(_CObject)
cdef class _CULong(_CObject)
cdef class _CLLong(_CObject)
cdef class _CULLong(_CObject)
cdef class _CFloat(_CObject)
cdef class _CDouble(_CObject)
cdef class _CLDouble(_CObject)


#cdef public class _CChar(_CObject)[ object AdaptObj_CChar, type AdaptType_CChar ]:
cdef class _CChar(_CObject):
  def __init__( self, value = None, addr = None ):
    cdef char*p
    cdef long c_addr
    cdef _CObject cobject
    if addr is None:
      p = <char*>pyx_calloc(1,sizeof(char))
      self.p = <void*>p
      if isinstance(value,CObject):
        if isinstance(value,_CChar):
          cobject = value
          p[0] = (<char*>cobject.p)[0]
        else:
          value.init_CChar(self)
      elif value is not None:
        p[0] = value
      else:
        p[0] = 0
      self.malloced = True
    else:
      c_addr = addr
      self.p = <void*>c_addr
      self.malloced = False
  def __int__( self ):
    cdef char *p
    assert self.p != NULL
    p = <char*>self.p
    return int(p[0])
  def __float__( self ):
    cdef char *p
    assert self.p != NULL
    p = <char*>self.p
    return float(p[0])
  def __add__( x, y ):
    cdef char val
    cdef _CChar self
    if not isinstance(x,CChar):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<char*>self.p)[0]
    val = val + y
    return CChar(val)
  def __sub__( x, y ):
    cdef char val
    cdef _CChar self
    if not isinstance(x,CChar):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<char*>self.p)[0]
    val = val - y
    return CChar(val)
  def __mul__( x, y ):
    cdef char val
    cdef _CChar self
    if not isinstance(x,CChar):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<char*>self.p)[0]
    val = val + y
    return CChar(val)
  def __repr__( self ):
    cdef long c_addr
    cdef char c_val
    c_addr = <long>self.p
    value = ""
    if c_addr != 0:
      c_val = (<char*>self.p)[0]
      value = ", value = %s" % str( c_val )
    return "%s( addr = %s%s )" % (self.__class__.__name__, hex(c_addr), value)
  def set_value( self, value ):
    if isinstance(value,CObject):
      value.init_CChar(self)
    else:
      (<char*>self.p)[0] = value
  def get_value( self ):
    return (<char*>self.p)[0]
  def to_CChar(self):
    return self
  def init_from( self, _CChar cobject ):
    " init self from a CChar instance "
#    if not self.is_compatible(cobject):
    if not isinstance( cobject, CChar ):
      raise TypeError("%s cannot be set from %s" % (self.__class__, cobject))
    (<char*>self.p)[0] = (<char*>cobject.p)[0]
  def get_basetype( self ):
    return CChar
#  def sizeof( self ):
#    return sizeof(char)
#  def is_compatible( self, _CObject cobject ):
#    return isinstance( cobject, CChar )
  def __str__( self ):
    cdef int a
    a = (<char*>self.p)[0]
    s = PyString_FromFormat('%c', a)
    return s
  def from_CChar( self, _CChar cobject ):
    " set self from a CChar instance"
    (<char*>self.p)[0] = <char>(<char*>cobject.p)[0]
  def init_CChar( self, _CChar cobject ):
    " set a CChar instance from self "
    (<char*>cobject.p)[0] = <char>(<char*>self.p)[0]
  def from_CSChar( self, _CSChar cobject ):
    " set self from a CSChar instance"
    (<char*>self.p)[0] = <char>(<signed char*>cobject.p)[0]
  def init_CSChar( self, _CSChar cobject ):
    " set a CSChar instance from self "
    (<signed char*>cobject.p)[0] = <signed char>(<char*>self.p)[0]
  def to_CSChar( self ):
    " cast self to new CSChar instance "
    cdef char c_src
    cdef signed char c_tgt
    cdef _CChar py_src
    cdef _CSChar py_tgt
    c_src = (<char*>self.p)[0]
    c_tgt = <signed char>c_src
    py_tgt = CSChar()
    (<signed char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUChar( self, _CUChar cobject ):
    " set self from a CUChar instance"
    (<char*>self.p)[0] = <char>(<unsigned char*>cobject.p)[0]
  def init_CUChar( self, _CUChar cobject ):
    " set a CUChar instance from self "
    (<unsigned char*>cobject.p)[0] = <unsigned char>(<char*>self.p)[0]
  def to_CUChar( self ):
    " cast self to new CUChar instance "
    cdef char c_src
    cdef unsigned char c_tgt
    cdef _CChar py_src
    cdef _CUChar py_tgt
    c_src = (<char*>self.p)[0]
    c_tgt = <unsigned char>c_src
    py_tgt = CUChar()
    (<unsigned char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CShort( self, _CShort cobject ):
    " set self from a CShort instance"
    (<char*>self.p)[0] = <char>(<short*>cobject.p)[0]
  def init_CShort( self, _CShort cobject ):
    " set a CShort instance from self "
    (<short*>cobject.p)[0] = <short>(<char*>self.p)[0]
  def to_CShort( self ):
    " cast self to new CShort instance "
    cdef char c_src
    cdef short c_tgt
    cdef _CChar py_src
    cdef _CShort py_tgt
    c_src = (<char*>self.p)[0]
    c_tgt = <short>c_src
    py_tgt = CShort()
    (<short*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUShort( self, _CUShort cobject ):
    " set self from a CUShort instance"
    (<char*>self.p)[0] = <char>(<unsigned short*>cobject.p)[0]
  def init_CUShort( self, _CUShort cobject ):
    " set a CUShort instance from self "
    (<unsigned short*>cobject.p)[0] = <unsigned short>(<char*>self.p)[0]
  def to_CUShort( self ):
    " cast self to new CUShort instance "
    cdef char c_src
    cdef unsigned short c_tgt
    cdef _CChar py_src
    cdef _CUShort py_tgt
    c_src = (<char*>self.p)[0]
    c_tgt = <unsigned short>c_src
    py_tgt = CUShort()
    (<unsigned short*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CInt( self, _CInt cobject ):
    " set self from a CInt instance"
    (<char*>self.p)[0] = <char>(<int*>cobject.p)[0]
  def init_CInt( self, _CInt cobject ):
    " set a CInt instance from self "
    (<int*>cobject.p)[0] = <int>(<char*>self.p)[0]
  def to_CInt( self ):
    " cast self to new CInt instance "
    cdef char c_src
    cdef int c_tgt
    cdef _CChar py_src
    cdef _CInt py_tgt
    c_src = (<char*>self.p)[0]
    c_tgt = <int>c_src
    py_tgt = CInt()
    (<int*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUInt( self, _CUInt cobject ):
    " set self from a CUInt instance"
    (<char*>self.p)[0] = <char>(<unsigned int*>cobject.p)[0]
  def init_CUInt( self, _CUInt cobject ):
    " set a CUInt instance from self "
    (<unsigned int*>cobject.p)[0] = <unsigned int>(<char*>self.p)[0]
  def to_CUInt( self ):
    " cast self to new CUInt instance "
    cdef char c_src
    cdef unsigned int c_tgt
    cdef _CChar py_src
    cdef _CUInt py_tgt
    c_src = (<char*>self.p)[0]
    c_tgt = <unsigned int>c_src
    py_tgt = CUInt()
    (<unsigned int*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLong( self, _CLong cobject ):
    " set self from a CLong instance"
    (<char*>self.p)[0] = <char>(<long*>cobject.p)[0]
  def init_CLong( self, _CLong cobject ):
    " set a CLong instance from self "
    (<long*>cobject.p)[0] = <long>(<char*>self.p)[0]
  def to_CLong( self ):
    " cast self to new CLong instance "
    cdef char c_src
    cdef long c_tgt
    cdef _CChar py_src
    cdef _CLong py_tgt
    c_src = (<char*>self.p)[0]
    c_tgt = <long>c_src
    py_tgt = CLong()
    (<long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CULong( self, _CULong cobject ):
    " set self from a CULong instance"
    (<char*>self.p)[0] = <char>(<unsigned long*>cobject.p)[0]
  def init_CULong( self, _CULong cobject ):
    " set a CULong instance from self "
    (<unsigned long*>cobject.p)[0] = <unsigned long>(<char*>self.p)[0]
  def to_CULong( self ):
    " cast self to new CULong instance "
    cdef char c_src
    cdef unsigned long c_tgt
    cdef _CChar py_src
    cdef _CULong py_tgt
    c_src = (<char*>self.p)[0]
    c_tgt = <unsigned long>c_src
    py_tgt = CULong()
    (<unsigned long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLLong( self, _CLLong cobject ):
    " set self from a CLLong instance"
    (<char*>self.p)[0] = <char>(<long long*>cobject.p)[0]
  def init_CLLong( self, _CLLong cobject ):
    " set a CLLong instance from self "
    (<long long*>cobject.p)[0] = <long long>(<char*>self.p)[0]
  def to_CLLong( self ):
    " cast self to new CLLong instance "
    cdef char c_src
    cdef long long c_tgt
    cdef _CChar py_src
    cdef _CLLong py_tgt
    c_src = (<char*>self.p)[0]
    c_tgt = <long long>c_src
    py_tgt = CLLong()
    (<long long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CULLong( self, _CULLong cobject ):
    " set self from a CULLong instance"
    (<char*>self.p)[0] = <char>(<unsigned long long*>cobject.p)[0]
  def init_CULLong( self, _CULLong cobject ):
    " set a CULLong instance from self "
    (<unsigned long long*>cobject.p)[0] = <unsigned long long>(<char*>self.p)[0]
  def to_CULLong( self ):
    " cast self to new CULLong instance "
    cdef char c_src
    cdef unsigned long long c_tgt
    cdef _CChar py_src
    cdef _CULLong py_tgt
    c_src = (<char*>self.p)[0]
    c_tgt = <unsigned long long>c_src
    py_tgt = CULLong()
    (<unsigned long long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CFloat( self, _CFloat cobject ):
    " set self from a CFloat instance"
    (<char*>self.p)[0] = <char>(<float*>cobject.p)[0]
  def init_CFloat( self, _CFloat cobject ):
    " set a CFloat instance from self "
    (<float*>cobject.p)[0] = <float>(<char*>self.p)[0]
  def to_CFloat( self ):
    " cast self to new CFloat instance "
    cdef char c_src
    cdef float c_tgt
    cdef _CChar py_src
    cdef _CFloat py_tgt
    c_src = (<char*>self.p)[0]
    c_tgt = <float>c_src
    py_tgt = CFloat()
    (<float*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CDouble( self, _CDouble cobject ):
    " set self from a CDouble instance"
    (<char*>self.p)[0] = <char>(<double*>cobject.p)[0]
  def init_CDouble( self, _CDouble cobject ):
    " set a CDouble instance from self "
    (<double*>cobject.p)[0] = <double>(<char*>self.p)[0]
  def to_CDouble( self ):
    " cast self to new CDouble instance "
    cdef char c_src
    cdef double c_tgt
    cdef _CChar py_src
    cdef _CDouble py_tgt
    c_src = (<char*>self.p)[0]
    c_tgt = <double>c_src
    py_tgt = CDouble()
    (<double*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLDouble( self, _CLDouble cobject ):
    " set self from a CLDouble instance"
    (<char*>self.p)[0] = <char>(<long double*>cobject.p)[0]
  def init_CLDouble( self, _CLDouble cobject ):
    " set a CLDouble instance from self "
    (<long double*>cobject.p)[0] = <long double>(<char*>self.p)[0]
  def to_CLDouble( self ):
    " cast self to new CLDouble instance "
    cdef char c_src
    cdef long double c_tgt
    cdef _CChar py_src
    cdef _CLDouble py_tgt
    c_src = (<char*>self.p)[0]
    c_tgt = <long double>c_src
    py_tgt = CLDouble()
    (<long double*>py_tgt.p)[0] = c_tgt
    return py_tgt
CChar = Meta('CChar', (_CChar,), {} )
CChar.basetype = CChar
CChar.sizeof = sizeof(char)

#cdef public class _CSChar(_CObject)[ object AdaptObj_CSChar, type AdaptType_CSChar ]:
cdef class _CSChar(_CObject):
  def __init__( self, value = None, addr = None ):
    cdef signed char*p
    cdef long c_addr
    cdef _CObject cobject
    if addr is None:
      p = <signed char*>pyx_calloc(1,sizeof(signed char))
      self.p = <void*>p
      if isinstance(value,CObject):
        if isinstance(value,_CSChar):
          cobject = value
          p[0] = (<signed char*>cobject.p)[0]
        else:
          value.init_CSChar(self)
      elif value is not None:
        p[0] = value
      else:
        p[0] = 0
      self.malloced = True
    else:
      c_addr = addr
      self.p = <void*>c_addr
      self.malloced = False
  def __int__( self ):
    cdef signed char *p
    assert self.p != NULL
    p = <signed char*>self.p
    return int(p[0])
  def __float__( self ):
    cdef signed char *p
    assert self.p != NULL
    p = <signed char*>self.p
    return float(p[0])
  def __add__( x, y ):
    cdef signed char val
    cdef _CSChar self
    if not isinstance(x,CSChar):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<signed char*>self.p)[0]
    val = val + y
    return CSChar(val)
  def __sub__( x, y ):
    cdef signed char val
    cdef _CSChar self
    if not isinstance(x,CSChar):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<signed char*>self.p)[0]
    val = val - y
    return CSChar(val)
  def __mul__( x, y ):
    cdef signed char val
    cdef _CSChar self
    if not isinstance(x,CSChar):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<signed char*>self.p)[0]
    val = val + y
    return CSChar(val)
  def __repr__( self ):
    cdef long c_addr
    cdef signed char c_val
    c_addr = <long>self.p
    value = ""
    if c_addr != 0:
      c_val = (<signed char*>self.p)[0]
      value = ", value = %s" % str( c_val )
    return "%s( addr = %s%s )" % (self.__class__.__name__, hex(c_addr), value)
  def set_value( self, value ):
    if isinstance(value,CObject):
      value.init_CSChar(self)
    else:
      (<signed char*>self.p)[0] = value
  def get_value( self ):
    return (<signed char*>self.p)[0]
  def to_CSChar(self):
    return self
  def init_from( self, _CSChar cobject ):
    " init self from a CSChar instance "
#    if not self.is_compatible(cobject):
    if not isinstance( cobject, CSChar ):
      raise TypeError("%s cannot be set from %s" % (self.__class__, cobject))
    (<signed char*>self.p)[0] = (<signed char*>cobject.p)[0]
  def get_basetype( self ):
    return CSChar
#  def sizeof( self ):
#    return sizeof(signed char)
#  def is_compatible( self, _CObject cobject ):
#    return isinstance( cobject, CSChar )
  def __str__( self ):
    cdef long c_addr
    cdef signed char c_val
    c_addr = <long>self.p
    value = ""
    if c_addr != 0:
      c_val = (<signed char*>self.p)[0]
      value = str( c_val )
    return value
  def from_CChar( self, _CChar cobject ):
    " set self from a CChar instance"
    (<signed char*>self.p)[0] = <signed char>(<char*>cobject.p)[0]
  def init_CChar( self, _CChar cobject ):
    " set a CChar instance from self "
    (<char*>cobject.p)[0] = <char>(<signed char*>self.p)[0]
  def to_CChar( self ):
    " cast self to new CChar instance "
    cdef signed char c_src
    cdef char c_tgt
    cdef _CSChar py_src
    cdef _CChar py_tgt
    c_src = (<signed char*>self.p)[0]
    c_tgt = <char>c_src
    py_tgt = CChar()
    (<char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CSChar( self, _CSChar cobject ):
    " set self from a CSChar instance"
    (<signed char*>self.p)[0] = <signed char>(<signed char*>cobject.p)[0]
  def init_CSChar( self, _CSChar cobject ):
    " set a CSChar instance from self "
    (<signed char*>cobject.p)[0] = <signed char>(<signed char*>self.p)[0]
  def from_CUChar( self, _CUChar cobject ):
    " set self from a CUChar instance"
    (<signed char*>self.p)[0] = <signed char>(<unsigned char*>cobject.p)[0]
  def init_CUChar( self, _CUChar cobject ):
    " set a CUChar instance from self "
    (<unsigned char*>cobject.p)[0] = <unsigned char>(<signed char*>self.p)[0]
  def to_CUChar( self ):
    " cast self to new CUChar instance "
    cdef signed char c_src
    cdef unsigned char c_tgt
    cdef _CSChar py_src
    cdef _CUChar py_tgt
    c_src = (<signed char*>self.p)[0]
    c_tgt = <unsigned char>c_src
    py_tgt = CUChar()
    (<unsigned char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CShort( self, _CShort cobject ):
    " set self from a CShort instance"
    (<signed char*>self.p)[0] = <signed char>(<short*>cobject.p)[0]
  def init_CShort( self, _CShort cobject ):
    " set a CShort instance from self "
    (<short*>cobject.p)[0] = <short>(<signed char*>self.p)[0]
  def to_CShort( self ):
    " cast self to new CShort instance "
    cdef signed char c_src
    cdef short c_tgt
    cdef _CSChar py_src
    cdef _CShort py_tgt
    c_src = (<signed char*>self.p)[0]
    c_tgt = <short>c_src
    py_tgt = CShort()
    (<short*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUShort( self, _CUShort cobject ):
    " set self from a CUShort instance"
    (<signed char*>self.p)[0] = <signed char>(<unsigned short*>cobject.p)[0]
  def init_CUShort( self, _CUShort cobject ):
    " set a CUShort instance from self "
    (<unsigned short*>cobject.p)[0] = <unsigned short>(<signed char*>self.p)[0]
  def to_CUShort( self ):
    " cast self to new CUShort instance "
    cdef signed char c_src
    cdef unsigned short c_tgt
    cdef _CSChar py_src
    cdef _CUShort py_tgt
    c_src = (<signed char*>self.p)[0]
    c_tgt = <unsigned short>c_src
    py_tgt = CUShort()
    (<unsigned short*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CInt( self, _CInt cobject ):
    " set self from a CInt instance"
    (<signed char*>self.p)[0] = <signed char>(<int*>cobject.p)[0]
  def init_CInt( self, _CInt cobject ):
    " set a CInt instance from self "
    (<int*>cobject.p)[0] = <int>(<signed char*>self.p)[0]
  def to_CInt( self ):
    " cast self to new CInt instance "
    cdef signed char c_src
    cdef int c_tgt
    cdef _CSChar py_src
    cdef _CInt py_tgt
    c_src = (<signed char*>self.p)[0]
    c_tgt = <int>c_src
    py_tgt = CInt()
    (<int*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUInt( self, _CUInt cobject ):
    " set self from a CUInt instance"
    (<signed char*>self.p)[0] = <signed char>(<unsigned int*>cobject.p)[0]
  def init_CUInt( self, _CUInt cobject ):
    " set a CUInt instance from self "
    (<unsigned int*>cobject.p)[0] = <unsigned int>(<signed char*>self.p)[0]
  def to_CUInt( self ):
    " cast self to new CUInt instance "
    cdef signed char c_src
    cdef unsigned int c_tgt
    cdef _CSChar py_src
    cdef _CUInt py_tgt
    c_src = (<signed char*>self.p)[0]
    c_tgt = <unsigned int>c_src
    py_tgt = CUInt()
    (<unsigned int*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLong( self, _CLong cobject ):
    " set self from a CLong instance"
    (<signed char*>self.p)[0] = <signed char>(<long*>cobject.p)[0]
  def init_CLong( self, _CLong cobject ):
    " set a CLong instance from self "
    (<long*>cobject.p)[0] = <long>(<signed char*>self.p)[0]
  def to_CLong( self ):
    " cast self to new CLong instance "
    cdef signed char c_src
    cdef long c_tgt
    cdef _CSChar py_src
    cdef _CLong py_tgt
    c_src = (<signed char*>self.p)[0]
    c_tgt = <long>c_src
    py_tgt = CLong()
    (<long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CULong( self, _CULong cobject ):
    " set self from a CULong instance"
    (<signed char*>self.p)[0] = <signed char>(<unsigned long*>cobject.p)[0]
  def init_CULong( self, _CULong cobject ):
    " set a CULong instance from self "
    (<unsigned long*>cobject.p)[0] = <unsigned long>(<signed char*>self.p)[0]
  def to_CULong( self ):
    " cast self to new CULong instance "
    cdef signed char c_src
    cdef unsigned long c_tgt
    cdef _CSChar py_src
    cdef _CULong py_tgt
    c_src = (<signed char*>self.p)[0]
    c_tgt = <unsigned long>c_src
    py_tgt = CULong()
    (<unsigned long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLLong( self, _CLLong cobject ):
    " set self from a CLLong instance"
    (<signed char*>self.p)[0] = <signed char>(<long long*>cobject.p)[0]
  def init_CLLong( self, _CLLong cobject ):
    " set a CLLong instance from self "
    (<long long*>cobject.p)[0] = <long long>(<signed char*>self.p)[0]
  def to_CLLong( self ):
    " cast self to new CLLong instance "
    cdef signed char c_src
    cdef long long c_tgt
    cdef _CSChar py_src
    cdef _CLLong py_tgt
    c_src = (<signed char*>self.p)[0]
    c_tgt = <long long>c_src
    py_tgt = CLLong()
    (<long long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CULLong( self, _CULLong cobject ):
    " set self from a CULLong instance"
    (<signed char*>self.p)[0] = <signed char>(<unsigned long long*>cobject.p)[0]
  def init_CULLong( self, _CULLong cobject ):
    " set a CULLong instance from self "
    (<unsigned long long*>cobject.p)[0] = <unsigned long long>(<signed char*>self.p)[0]
  def to_CULLong( self ):
    " cast self to new CULLong instance "
    cdef signed char c_src
    cdef unsigned long long c_tgt
    cdef _CSChar py_src
    cdef _CULLong py_tgt
    c_src = (<signed char*>self.p)[0]
    c_tgt = <unsigned long long>c_src
    py_tgt = CULLong()
    (<unsigned long long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CFloat( self, _CFloat cobject ):
    " set self from a CFloat instance"
    (<signed char*>self.p)[0] = <signed char>(<float*>cobject.p)[0]
  def init_CFloat( self, _CFloat cobject ):
    " set a CFloat instance from self "
    (<float*>cobject.p)[0] = <float>(<signed char*>self.p)[0]
  def to_CFloat( self ):
    " cast self to new CFloat instance "
    cdef signed char c_src
    cdef float c_tgt
    cdef _CSChar py_src
    cdef _CFloat py_tgt
    c_src = (<signed char*>self.p)[0]
    c_tgt = <float>c_src
    py_tgt = CFloat()
    (<float*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CDouble( self, _CDouble cobject ):
    " set self from a CDouble instance"
    (<signed char*>self.p)[0] = <signed char>(<double*>cobject.p)[0]
  def init_CDouble( self, _CDouble cobject ):
    " set a CDouble instance from self "
    (<double*>cobject.p)[0] = <double>(<signed char*>self.p)[0]
  def to_CDouble( self ):
    " cast self to new CDouble instance "
    cdef signed char c_src
    cdef double c_tgt
    cdef _CSChar py_src
    cdef _CDouble py_tgt
    c_src = (<signed char*>self.p)[0]
    c_tgt = <double>c_src
    py_tgt = CDouble()
    (<double*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLDouble( self, _CLDouble cobject ):
    " set self from a CLDouble instance"
    (<signed char*>self.p)[0] = <signed char>(<long double*>cobject.p)[0]
  def init_CLDouble( self, _CLDouble cobject ):
    " set a CLDouble instance from self "
    (<long double*>cobject.p)[0] = <long double>(<signed char*>self.p)[0]
  def to_CLDouble( self ):
    " cast self to new CLDouble instance "
    cdef signed char c_src
    cdef long double c_tgt
    cdef _CSChar py_src
    cdef _CLDouble py_tgt
    c_src = (<signed char*>self.p)[0]
    c_tgt = <long double>c_src
    py_tgt = CLDouble()
    (<long double*>py_tgt.p)[0] = c_tgt
    return py_tgt
CSChar = Meta('CSChar', (_CSChar,), {} )
CSChar.basetype = CSChar
CSChar.sizeof = sizeof(signed char)

#cdef public class _CUChar(_CObject)[ object AdaptObj_CUChar, type AdaptType_CUChar ]:
cdef class _CUChar(_CObject):
  def __init__( self, value = None, addr = None ):
    cdef unsigned char*p
    cdef long c_addr
    cdef _CObject cobject
    if addr is None:
      p = <unsigned char*>pyx_calloc(1,sizeof(unsigned char))
      self.p = <void*>p
      if isinstance(value,CObject):
        if isinstance(value,_CUChar):
          cobject = value
          p[0] = (<unsigned char*>cobject.p)[0]
        else:
          value.init_CUChar(self)
      elif value is not None:
        p[0] = value
      else:
        p[0] = 0
      self.malloced = True
    else:
      c_addr = addr
      self.p = <void*>c_addr
      self.malloced = False
  def __int__( self ):
    cdef unsigned char *p
    assert self.p != NULL
    p = <unsigned char*>self.p
    return int(p[0])
  def __float__( self ):
    cdef unsigned char *p
    assert self.p != NULL
    p = <unsigned char*>self.p
    return float(p[0])
  def __add__( x, y ):
    cdef unsigned char val
    cdef _CUChar self
    if not isinstance(x,CUChar):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<unsigned char*>self.p)[0]
    val = val + y
    return CUChar(val)
  def __sub__( x, y ):
    cdef unsigned char val
    cdef _CUChar self
    if not isinstance(x,CUChar):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<unsigned char*>self.p)[0]
    val = val - y
    return CUChar(val)
  def __mul__( x, y ):
    cdef unsigned char val
    cdef _CUChar self
    if not isinstance(x,CUChar):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<unsigned char*>self.p)[0]
    val = val + y
    return CUChar(val)
  def __repr__( self ):
    cdef long c_addr
    cdef unsigned char c_val
    c_addr = <long>self.p
    value = ""
    if c_addr != 0:
      c_val = (<unsigned char*>self.p)[0]
      value = ", value = %s" % str( c_val )
    return "%s( addr = %s%s )" % (self.__class__.__name__, hex(c_addr), value)
  def set_value( self, value ):
    if isinstance(value,CObject):
      value.init_CUChar(self)
    else:
      (<unsigned char*>self.p)[0] = value
  def get_value( self ):
    return (<unsigned char*>self.p)[0]
  def to_CUChar(self):
    return self
  def init_from( self, _CUChar cobject ):
    " init self from a CUChar instance "
#    if not self.is_compatible(cobject):
    if not isinstance( cobject, CUChar ):
      raise TypeError("%s cannot be set from %s" % (self.__class__, cobject))
    (<unsigned char*>self.p)[0] = (<unsigned char*>cobject.p)[0]
  def get_basetype( self ):
    return CUChar
#  def sizeof( self ):
#    return sizeof(unsigned char)
#  def is_compatible( self, _CObject cobject ):
#    return isinstance( cobject, CUChar )
  def __str__( self ):
    cdef long c_addr
    cdef unsigned char c_val
    c_addr = <long>self.p
    value = ""
    if c_addr != 0:
      c_val = (<unsigned char*>self.p)[0]
      value = str( c_val )
    return value
  def from_CChar( self, _CChar cobject ):
    " set self from a CChar instance"
    (<unsigned char*>self.p)[0] = <unsigned char>(<char*>cobject.p)[0]
  def init_CChar( self, _CChar cobject ):
    " set a CChar instance from self "
    (<char*>cobject.p)[0] = <char>(<unsigned char*>self.p)[0]
  def to_CChar( self ):
    " cast self to new CChar instance "
    cdef unsigned char c_src
    cdef char c_tgt
    cdef _CUChar py_src
    cdef _CChar py_tgt
    c_src = (<unsigned char*>self.p)[0]
    c_tgt = <char>c_src
    py_tgt = CChar()
    (<char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CSChar( self, _CSChar cobject ):
    " set self from a CSChar instance"
    (<unsigned char*>self.p)[0] = <unsigned char>(<signed char*>cobject.p)[0]
  def init_CSChar( self, _CSChar cobject ):
    " set a CSChar instance from self "
    (<signed char*>cobject.p)[0] = <signed char>(<unsigned char*>self.p)[0]
  def to_CSChar( self ):
    " cast self to new CSChar instance "
    cdef unsigned char c_src
    cdef signed char c_tgt
    cdef _CUChar py_src
    cdef _CSChar py_tgt
    c_src = (<unsigned char*>self.p)[0]
    c_tgt = <signed char>c_src
    py_tgt = CSChar()
    (<signed char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUChar( self, _CUChar cobject ):
    " set self from a CUChar instance"
    (<unsigned char*>self.p)[0] = <unsigned char>(<unsigned char*>cobject.p)[0]
  def init_CUChar( self, _CUChar cobject ):
    " set a CUChar instance from self "
    (<unsigned char*>cobject.p)[0] = <unsigned char>(<unsigned char*>self.p)[0]
  def from_CShort( self, _CShort cobject ):
    " set self from a CShort instance"
    (<unsigned char*>self.p)[0] = <unsigned char>(<short*>cobject.p)[0]
  def init_CShort( self, _CShort cobject ):
    " set a CShort instance from self "
    (<short*>cobject.p)[0] = <short>(<unsigned char*>self.p)[0]
  def to_CShort( self ):
    " cast self to new CShort instance "
    cdef unsigned char c_src
    cdef short c_tgt
    cdef _CUChar py_src
    cdef _CShort py_tgt
    c_src = (<unsigned char*>self.p)[0]
    c_tgt = <short>c_src
    py_tgt = CShort()
    (<short*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUShort( self, _CUShort cobject ):
    " set self from a CUShort instance"
    (<unsigned char*>self.p)[0] = <unsigned char>(<unsigned short*>cobject.p)[0]
  def init_CUShort( self, _CUShort cobject ):
    " set a CUShort instance from self "
    (<unsigned short*>cobject.p)[0] = <unsigned short>(<unsigned char*>self.p)[0]
  def to_CUShort( self ):
    " cast self to new CUShort instance "
    cdef unsigned char c_src
    cdef unsigned short c_tgt
    cdef _CUChar py_src
    cdef _CUShort py_tgt
    c_src = (<unsigned char*>self.p)[0]
    c_tgt = <unsigned short>c_src
    py_tgt = CUShort()
    (<unsigned short*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CInt( self, _CInt cobject ):
    " set self from a CInt instance"
    (<unsigned char*>self.p)[0] = <unsigned char>(<int*>cobject.p)[0]
  def init_CInt( self, _CInt cobject ):
    " set a CInt instance from self "
    (<int*>cobject.p)[0] = <int>(<unsigned char*>self.p)[0]
  def to_CInt( self ):
    " cast self to new CInt instance "
    cdef unsigned char c_src
    cdef int c_tgt
    cdef _CUChar py_src
    cdef _CInt py_tgt
    c_src = (<unsigned char*>self.p)[0]
    c_tgt = <int>c_src
    py_tgt = CInt()
    (<int*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUInt( self, _CUInt cobject ):
    " set self from a CUInt instance"
    (<unsigned char*>self.p)[0] = <unsigned char>(<unsigned int*>cobject.p)[0]
  def init_CUInt( self, _CUInt cobject ):
    " set a CUInt instance from self "
    (<unsigned int*>cobject.p)[0] = <unsigned int>(<unsigned char*>self.p)[0]
  def to_CUInt( self ):
    " cast self to new CUInt instance "
    cdef unsigned char c_src
    cdef unsigned int c_tgt
    cdef _CUChar py_src
    cdef _CUInt py_tgt
    c_src = (<unsigned char*>self.p)[0]
    c_tgt = <unsigned int>c_src
    py_tgt = CUInt()
    (<unsigned int*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLong( self, _CLong cobject ):
    " set self from a CLong instance"
    (<unsigned char*>self.p)[0] = <unsigned char>(<long*>cobject.p)[0]
  def init_CLong( self, _CLong cobject ):
    " set a CLong instance from self "
    (<long*>cobject.p)[0] = <long>(<unsigned char*>self.p)[0]
  def to_CLong( self ):
    " cast self to new CLong instance "
    cdef unsigned char c_src
    cdef long c_tgt
    cdef _CUChar py_src
    cdef _CLong py_tgt
    c_src = (<unsigned char*>self.p)[0]
    c_tgt = <long>c_src
    py_tgt = CLong()
    (<long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CULong( self, _CULong cobject ):
    " set self from a CULong instance"
    (<unsigned char*>self.p)[0] = <unsigned char>(<unsigned long*>cobject.p)[0]
  def init_CULong( self, _CULong cobject ):
    " set a CULong instance from self "
    (<unsigned long*>cobject.p)[0] = <unsigned long>(<unsigned char*>self.p)[0]
  def to_CULong( self ):
    " cast self to new CULong instance "
    cdef unsigned char c_src
    cdef unsigned long c_tgt
    cdef _CUChar py_src
    cdef _CULong py_tgt
    c_src = (<unsigned char*>self.p)[0]
    c_tgt = <unsigned long>c_src
    py_tgt = CULong()
    (<unsigned long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLLong( self, _CLLong cobject ):
    " set self from a CLLong instance"
    (<unsigned char*>self.p)[0] = <unsigned char>(<long long*>cobject.p)[0]
  def init_CLLong( self, _CLLong cobject ):
    " set a CLLong instance from self "
    (<long long*>cobject.p)[0] = <long long>(<unsigned char*>self.p)[0]
  def to_CLLong( self ):
    " cast self to new CLLong instance "
    cdef unsigned char c_src
    cdef long long c_tgt
    cdef _CUChar py_src
    cdef _CLLong py_tgt
    c_src = (<unsigned char*>self.p)[0]
    c_tgt = <long long>c_src
    py_tgt = CLLong()
    (<long long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CULLong( self, _CULLong cobject ):
    " set self from a CULLong instance"
    (<unsigned char*>self.p)[0] = <unsigned char>(<unsigned long long*>cobject.p)[0]
  def init_CULLong( self, _CULLong cobject ):
    " set a CULLong instance from self "
    (<unsigned long long*>cobject.p)[0] = <unsigned long long>(<unsigned char*>self.p)[0]
  def to_CULLong( self ):
    " cast self to new CULLong instance "
    cdef unsigned char c_src
    cdef unsigned long long c_tgt
    cdef _CUChar py_src
    cdef _CULLong py_tgt
    c_src = (<unsigned char*>self.p)[0]
    c_tgt = <unsigned long long>c_src
    py_tgt = CULLong()
    (<unsigned long long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CFloat( self, _CFloat cobject ):
    " set self from a CFloat instance"
    (<unsigned char*>self.p)[0] = <unsigned char>(<float*>cobject.p)[0]
  def init_CFloat( self, _CFloat cobject ):
    " set a CFloat instance from self "
    (<float*>cobject.p)[0] = <float>(<unsigned char*>self.p)[0]
  def to_CFloat( self ):
    " cast self to new CFloat instance "
    cdef unsigned char c_src
    cdef float c_tgt
    cdef _CUChar py_src
    cdef _CFloat py_tgt
    c_src = (<unsigned char*>self.p)[0]
    c_tgt = <float>c_src
    py_tgt = CFloat()
    (<float*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CDouble( self, _CDouble cobject ):
    " set self from a CDouble instance"
    (<unsigned char*>self.p)[0] = <unsigned char>(<double*>cobject.p)[0]
  def init_CDouble( self, _CDouble cobject ):
    " set a CDouble instance from self "
    (<double*>cobject.p)[0] = <double>(<unsigned char*>self.p)[0]
  def to_CDouble( self ):
    " cast self to new CDouble instance "
    cdef unsigned char c_src
    cdef double c_tgt
    cdef _CUChar py_src
    cdef _CDouble py_tgt
    c_src = (<unsigned char*>self.p)[0]
    c_tgt = <double>c_src
    py_tgt = CDouble()
    (<double*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLDouble( self, _CLDouble cobject ):
    " set self from a CLDouble instance"
    (<unsigned char*>self.p)[0] = <unsigned char>(<long double*>cobject.p)[0]
  def init_CLDouble( self, _CLDouble cobject ):
    " set a CLDouble instance from self "
    (<long double*>cobject.p)[0] = <long double>(<unsigned char*>self.p)[0]
  def to_CLDouble( self ):
    " cast self to new CLDouble instance "
    cdef unsigned char c_src
    cdef long double c_tgt
    cdef _CUChar py_src
    cdef _CLDouble py_tgt
    c_src = (<unsigned char*>self.p)[0]
    c_tgt = <long double>c_src
    py_tgt = CLDouble()
    (<long double*>py_tgt.p)[0] = c_tgt
    return py_tgt
CUChar = Meta('CUChar', (_CUChar,), {} )
CUChar.basetype = CUChar
CUChar.sizeof = sizeof(unsigned char)

#cdef public class _CShort(_CObject)[ object AdaptObj_CShort, type AdaptType_CShort ]:
cdef class _CShort(_CObject):
  def __init__( self, value = None, addr = None ):
    cdef short*p
    cdef long c_addr
    cdef _CObject cobject
    if addr is None:
      p = <short*>pyx_calloc(1,sizeof(short))
      self.p = <void*>p
      if isinstance(value,CObject):
        if isinstance(value,_CShort):
          cobject = value
          p[0] = (<short*>cobject.p)[0]
        else:
          value.init_CShort(self)
      elif value is not None:
        p[0] = value
      else:
        p[0] = 0
      self.malloced = True
    else:
      c_addr = addr
      self.p = <void*>c_addr
      self.malloced = False
  def __int__( self ):
    cdef short *p
    assert self.p != NULL
    p = <short*>self.p
    return int(p[0])
  def __float__( self ):
    cdef short *p
    assert self.p != NULL
    p = <short*>self.p
    return float(p[0])
  def __add__( x, y ):
    cdef short val
    cdef _CShort self
    if not isinstance(x,CShort):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<short*>self.p)[0]
    val = val + y
    return CShort(val)
  def __sub__( x, y ):
    cdef short val
    cdef _CShort self
    if not isinstance(x,CShort):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<short*>self.p)[0]
    val = val - y
    return CShort(val)
  def __mul__( x, y ):
    cdef short val
    cdef _CShort self
    if not isinstance(x,CShort):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<short*>self.p)[0]
    val = val + y
    return CShort(val)
  def __repr__( self ):
    cdef long c_addr
    cdef short c_val
    c_addr = <long>self.p
    value = ""
    if c_addr != 0:
      c_val = (<short*>self.p)[0]
      value = ", value = %s" % str( c_val )
    return "%s( addr = %s%s )" % (self.__class__.__name__, hex(c_addr), value)
  def set_value( self, value ):
    if isinstance(value,CObject):
      value.init_CShort(self)
    else:
      (<short*>self.p)[0] = value
  def get_value( self ):
    return (<short*>self.p)[0]
  def to_CShort(self):
    return self
  def init_from( self, _CShort cobject ):
    " init self from a CShort instance "
#    if not self.is_compatible(cobject):
    if not isinstance( cobject, CShort ):
      raise TypeError("%s cannot be set from %s" % (self.__class__, cobject))
    (<short*>self.p)[0] = (<short*>cobject.p)[0]
  def get_basetype( self ):
    return CShort
#  def sizeof( self ):
#    return sizeof(short)
#  def is_compatible( self, _CObject cobject ):
#    return isinstance( cobject, CShort )
  def __str__( self ):
    cdef long c_addr
    cdef short c_val
    c_addr = <long>self.p
    value = ""
    if c_addr != 0:
      c_val = (<short*>self.p)[0]
      value = str( c_val )
    return value
  def from_CChar( self, _CChar cobject ):
    " set self from a CChar instance"
    (<short*>self.p)[0] = <short>(<char*>cobject.p)[0]
  def init_CChar( self, _CChar cobject ):
    " set a CChar instance from self "
    (<char*>cobject.p)[0] = <char>(<short*>self.p)[0]
  def to_CChar( self ):
    " cast self to new CChar instance "
    cdef short c_src
    cdef char c_tgt
    cdef _CShort py_src
    cdef _CChar py_tgt
    c_src = (<short*>self.p)[0]
    c_tgt = <char>c_src
    py_tgt = CChar()
    (<char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CSChar( self, _CSChar cobject ):
    " set self from a CSChar instance"
    (<short*>self.p)[0] = <short>(<signed char*>cobject.p)[0]
  def init_CSChar( self, _CSChar cobject ):
    " set a CSChar instance from self "
    (<signed char*>cobject.p)[0] = <signed char>(<short*>self.p)[0]
  def to_CSChar( self ):
    " cast self to new CSChar instance "
    cdef short c_src
    cdef signed char c_tgt
    cdef _CShort py_src
    cdef _CSChar py_tgt
    c_src = (<short*>self.p)[0]
    c_tgt = <signed char>c_src
    py_tgt = CSChar()
    (<signed char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUChar( self, _CUChar cobject ):
    " set self from a CUChar instance"
    (<short*>self.p)[0] = <short>(<unsigned char*>cobject.p)[0]
  def init_CUChar( self, _CUChar cobject ):
    " set a CUChar instance from self "
    (<unsigned char*>cobject.p)[0] = <unsigned char>(<short*>self.p)[0]
  def to_CUChar( self ):
    " cast self to new CUChar instance "
    cdef short c_src
    cdef unsigned char c_tgt
    cdef _CShort py_src
    cdef _CUChar py_tgt
    c_src = (<short*>self.p)[0]
    c_tgt = <unsigned char>c_src
    py_tgt = CUChar()
    (<unsigned char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CShort( self, _CShort cobject ):
    " set self from a CShort instance"
    (<short*>self.p)[0] = <short>(<short*>cobject.p)[0]
  def init_CShort( self, _CShort cobject ):
    " set a CShort instance from self "
    (<short*>cobject.p)[0] = <short>(<short*>self.p)[0]
  def from_CUShort( self, _CUShort cobject ):
    " set self from a CUShort instance"
    (<short*>self.p)[0] = <short>(<unsigned short*>cobject.p)[0]
  def init_CUShort( self, _CUShort cobject ):
    " set a CUShort instance from self "
    (<unsigned short*>cobject.p)[0] = <unsigned short>(<short*>self.p)[0]
  def to_CUShort( self ):
    " cast self to new CUShort instance "
    cdef short c_src
    cdef unsigned short c_tgt
    cdef _CShort py_src
    cdef _CUShort py_tgt
    c_src = (<short*>self.p)[0]
    c_tgt = <unsigned short>c_src
    py_tgt = CUShort()
    (<unsigned short*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CInt( self, _CInt cobject ):
    " set self from a CInt instance"
    (<short*>self.p)[0] = <short>(<int*>cobject.p)[0]
  def init_CInt( self, _CInt cobject ):
    " set a CInt instance from self "
    (<int*>cobject.p)[0] = <int>(<short*>self.p)[0]
  def to_CInt( self ):
    " cast self to new CInt instance "
    cdef short c_src
    cdef int c_tgt
    cdef _CShort py_src
    cdef _CInt py_tgt
    c_src = (<short*>self.p)[0]
    c_tgt = <int>c_src
    py_tgt = CInt()
    (<int*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUInt( self, _CUInt cobject ):
    " set self from a CUInt instance"
    (<short*>self.p)[0] = <short>(<unsigned int*>cobject.p)[0]
  def init_CUInt( self, _CUInt cobject ):
    " set a CUInt instance from self "
    (<unsigned int*>cobject.p)[0] = <unsigned int>(<short*>self.p)[0]
  def to_CUInt( self ):
    " cast self to new CUInt instance "
    cdef short c_src
    cdef unsigned int c_tgt
    cdef _CShort py_src
    cdef _CUInt py_tgt
    c_src = (<short*>self.p)[0]
    c_tgt = <unsigned int>c_src
    py_tgt = CUInt()
    (<unsigned int*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLong( self, _CLong cobject ):
    " set self from a CLong instance"
    (<short*>self.p)[0] = <short>(<long*>cobject.p)[0]
  def init_CLong( self, _CLong cobject ):
    " set a CLong instance from self "
    (<long*>cobject.p)[0] = <long>(<short*>self.p)[0]
  def to_CLong( self ):
    " cast self to new CLong instance "
    cdef short c_src
    cdef long c_tgt
    cdef _CShort py_src
    cdef _CLong py_tgt
    c_src = (<short*>self.p)[0]
    c_tgt = <long>c_src
    py_tgt = CLong()
    (<long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CULong( self, _CULong cobject ):
    " set self from a CULong instance"
    (<short*>self.p)[0] = <short>(<unsigned long*>cobject.p)[0]
  def init_CULong( self, _CULong cobject ):
    " set a CULong instance from self "
    (<unsigned long*>cobject.p)[0] = <unsigned long>(<short*>self.p)[0]
  def to_CULong( self ):
    " cast self to new CULong instance "
    cdef short c_src
    cdef unsigned long c_tgt
    cdef _CShort py_src
    cdef _CULong py_tgt
    c_src = (<short*>self.p)[0]
    c_tgt = <unsigned long>c_src
    py_tgt = CULong()
    (<unsigned long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLLong( self, _CLLong cobject ):
    " set self from a CLLong instance"
    (<short*>self.p)[0] = <short>(<long long*>cobject.p)[0]
  def init_CLLong( self, _CLLong cobject ):
    " set a CLLong instance from self "
    (<long long*>cobject.p)[0] = <long long>(<short*>self.p)[0]
  def to_CLLong( self ):
    " cast self to new CLLong instance "
    cdef short c_src
    cdef long long c_tgt
    cdef _CShort py_src
    cdef _CLLong py_tgt
    c_src = (<short*>self.p)[0]
    c_tgt = <long long>c_src
    py_tgt = CLLong()
    (<long long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CULLong( self, _CULLong cobject ):
    " set self from a CULLong instance"
    (<short*>self.p)[0] = <short>(<unsigned long long*>cobject.p)[0]
  def init_CULLong( self, _CULLong cobject ):
    " set a CULLong instance from self "
    (<unsigned long long*>cobject.p)[0] = <unsigned long long>(<short*>self.p)[0]
  def to_CULLong( self ):
    " cast self to new CULLong instance "
    cdef short c_src
    cdef unsigned long long c_tgt
    cdef _CShort py_src
    cdef _CULLong py_tgt
    c_src = (<short*>self.p)[0]
    c_tgt = <unsigned long long>c_src
    py_tgt = CULLong()
    (<unsigned long long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CFloat( self, _CFloat cobject ):
    " set self from a CFloat instance"
    (<short*>self.p)[0] = <short>(<float*>cobject.p)[0]
  def init_CFloat( self, _CFloat cobject ):
    " set a CFloat instance from self "
    (<float*>cobject.p)[0] = <float>(<short*>self.p)[0]
  def to_CFloat( self ):
    " cast self to new CFloat instance "
    cdef short c_src
    cdef float c_tgt
    cdef _CShort py_src
    cdef _CFloat py_tgt
    c_src = (<short*>self.p)[0]
    c_tgt = <float>c_src
    py_tgt = CFloat()
    (<float*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CDouble( self, _CDouble cobject ):
    " set self from a CDouble instance"
    (<short*>self.p)[0] = <short>(<double*>cobject.p)[0]
  def init_CDouble( self, _CDouble cobject ):
    " set a CDouble instance from self "
    (<double*>cobject.p)[0] = <double>(<short*>self.p)[0]
  def to_CDouble( self ):
    " cast self to new CDouble instance "
    cdef short c_src
    cdef double c_tgt
    cdef _CShort py_src
    cdef _CDouble py_tgt
    c_src = (<short*>self.p)[0]
    c_tgt = <double>c_src
    py_tgt = CDouble()
    (<double*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLDouble( self, _CLDouble cobject ):
    " set self from a CLDouble instance"
    (<short*>self.p)[0] = <short>(<long double*>cobject.p)[0]
  def init_CLDouble( self, _CLDouble cobject ):
    " set a CLDouble instance from self "
    (<long double*>cobject.p)[0] = <long double>(<short*>self.p)[0]
  def to_CLDouble( self ):
    " cast self to new CLDouble instance "
    cdef short c_src
    cdef long double c_tgt
    cdef _CShort py_src
    cdef _CLDouble py_tgt
    c_src = (<short*>self.p)[0]
    c_tgt = <long double>c_src
    py_tgt = CLDouble()
    (<long double*>py_tgt.p)[0] = c_tgt
    return py_tgt
CShort = Meta('CShort', (_CShort,), {} )
CShort.basetype = CShort
CShort.sizeof = sizeof(short)

#cdef public class _CUShort(_CObject)[ object AdaptObj_CUShort, type AdaptType_CUShort ]:
cdef class _CUShort(_CObject):
  def __init__( self, value = None, addr = None ):
    cdef unsigned short*p
    cdef long c_addr
    cdef _CObject cobject
    if addr is None:
      p = <unsigned short*>pyx_calloc(1,sizeof(unsigned short))
      self.p = <void*>p
      if isinstance(value,CObject):
        if isinstance(value,_CUShort):
          cobject = value
          p[0] = (<unsigned short*>cobject.p)[0]
        else:
          value.init_CUShort(self)
      elif value is not None:
        p[0] = value
      else:
        p[0] = 0
      self.malloced = True
    else:
      c_addr = addr
      self.p = <void*>c_addr
      self.malloced = False
  def __int__( self ):
    cdef unsigned short *p
    assert self.p != NULL
    p = <unsigned short*>self.p
    return int(p[0])
  def __float__( self ):
    cdef unsigned short *p
    assert self.p != NULL
    p = <unsigned short*>self.p
    return float(p[0])
  def __add__( x, y ):
    cdef unsigned short val
    cdef _CUShort self
    if not isinstance(x,CUShort):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<unsigned short*>self.p)[0]
    val = val + y
    return CUShort(val)
  def __sub__( x, y ):
    cdef unsigned short val
    cdef _CUShort self
    if not isinstance(x,CUShort):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<unsigned short*>self.p)[0]
    val = val - y
    return CUShort(val)
  def __mul__( x, y ):
    cdef unsigned short val
    cdef _CUShort self
    if not isinstance(x,CUShort):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<unsigned short*>self.p)[0]
    val = val + y
    return CUShort(val)
  def __repr__( self ):
    cdef long c_addr
    cdef unsigned short c_val
    c_addr = <long>self.p
    value = ""
    if c_addr != 0:
      c_val = (<unsigned short*>self.p)[0]
      value = ", value = %s" % str( c_val )
    return "%s( addr = %s%s )" % (self.__class__.__name__, hex(c_addr), value)
  def set_value( self, value ):
    if isinstance(value,CObject):
      value.init_CUShort(self)
    else:
      (<unsigned short*>self.p)[0] = value
  def get_value( self ):
    return (<unsigned short*>self.p)[0]
  def to_CUShort(self):
    return self
  def init_from( self, _CUShort cobject ):
    " init self from a CUShort instance "
#    if not self.is_compatible(cobject):
    if not isinstance( cobject, CUShort ):
      raise TypeError("%s cannot be set from %s" % (self.__class__, cobject))
    (<unsigned short*>self.p)[0] = (<unsigned short*>cobject.p)[0]
  def get_basetype( self ):
    return CUShort
#  def sizeof( self ):
#    return sizeof(unsigned short)
#  def is_compatible( self, _CObject cobject ):
#    return isinstance( cobject, CUShort )
  def __str__( self ):
    cdef long c_addr
    cdef unsigned short c_val
    c_addr = <long>self.p
    value = ""
    if c_addr != 0:
      c_val = (<unsigned short*>self.p)[0]
      value = str( c_val )
    return value
  def from_CChar( self, _CChar cobject ):
    " set self from a CChar instance"
    (<unsigned short*>self.p)[0] = <unsigned short>(<char*>cobject.p)[0]
  def init_CChar( self, _CChar cobject ):
    " set a CChar instance from self "
    (<char*>cobject.p)[0] = <char>(<unsigned short*>self.p)[0]
  def to_CChar( self ):
    " cast self to new CChar instance "
    cdef unsigned short c_src
    cdef char c_tgt
    cdef _CUShort py_src
    cdef _CChar py_tgt
    c_src = (<unsigned short*>self.p)[0]
    c_tgt = <char>c_src
    py_tgt = CChar()
    (<char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CSChar( self, _CSChar cobject ):
    " set self from a CSChar instance"
    (<unsigned short*>self.p)[0] = <unsigned short>(<signed char*>cobject.p)[0]
  def init_CSChar( self, _CSChar cobject ):
    " set a CSChar instance from self "
    (<signed char*>cobject.p)[0] = <signed char>(<unsigned short*>self.p)[0]
  def to_CSChar( self ):
    " cast self to new CSChar instance "
    cdef unsigned short c_src
    cdef signed char c_tgt
    cdef _CUShort py_src
    cdef _CSChar py_tgt
    c_src = (<unsigned short*>self.p)[0]
    c_tgt = <signed char>c_src
    py_tgt = CSChar()
    (<signed char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUChar( self, _CUChar cobject ):
    " set self from a CUChar instance"
    (<unsigned short*>self.p)[0] = <unsigned short>(<unsigned char*>cobject.p)[0]
  def init_CUChar( self, _CUChar cobject ):
    " set a CUChar instance from self "
    (<unsigned char*>cobject.p)[0] = <unsigned char>(<unsigned short*>self.p)[0]
  def to_CUChar( self ):
    " cast self to new CUChar instance "
    cdef unsigned short c_src
    cdef unsigned char c_tgt
    cdef _CUShort py_src
    cdef _CUChar py_tgt
    c_src = (<unsigned short*>self.p)[0]
    c_tgt = <unsigned char>c_src
    py_tgt = CUChar()
    (<unsigned char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CShort( self, _CShort cobject ):
    " set self from a CShort instance"
    (<unsigned short*>self.p)[0] = <unsigned short>(<short*>cobject.p)[0]
  def init_CShort( self, _CShort cobject ):
    " set a CShort instance from self "
    (<short*>cobject.p)[0] = <short>(<unsigned short*>self.p)[0]
  def to_CShort( self ):
    " cast self to new CShort instance "
    cdef unsigned short c_src
    cdef short c_tgt
    cdef _CUShort py_src
    cdef _CShort py_tgt
    c_src = (<unsigned short*>self.p)[0]
    c_tgt = <short>c_src
    py_tgt = CShort()
    (<short*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUShort( self, _CUShort cobject ):
    " set self from a CUShort instance"
    (<unsigned short*>self.p)[0] = <unsigned short>(<unsigned short*>cobject.p)[0]
  def init_CUShort( self, _CUShort cobject ):
    " set a CUShort instance from self "
    (<unsigned short*>cobject.p)[0] = <unsigned short>(<unsigned short*>self.p)[0]
  def from_CInt( self, _CInt cobject ):
    " set self from a CInt instance"
    (<unsigned short*>self.p)[0] = <unsigned short>(<int*>cobject.p)[0]
  def init_CInt( self, _CInt cobject ):
    " set a CInt instance from self "
    (<int*>cobject.p)[0] = <int>(<unsigned short*>self.p)[0]
  def to_CInt( self ):
    " cast self to new CInt instance "
    cdef unsigned short c_src
    cdef int c_tgt
    cdef _CUShort py_src
    cdef _CInt py_tgt
    c_src = (<unsigned short*>self.p)[0]
    c_tgt = <int>c_src
    py_tgt = CInt()
    (<int*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUInt( self, _CUInt cobject ):
    " set self from a CUInt instance"
    (<unsigned short*>self.p)[0] = <unsigned short>(<unsigned int*>cobject.p)[0]
  def init_CUInt( self, _CUInt cobject ):
    " set a CUInt instance from self "
    (<unsigned int*>cobject.p)[0] = <unsigned int>(<unsigned short*>self.p)[0]
  def to_CUInt( self ):
    " cast self to new CUInt instance "
    cdef unsigned short c_src
    cdef unsigned int c_tgt
    cdef _CUShort py_src
    cdef _CUInt py_tgt
    c_src = (<unsigned short*>self.p)[0]
    c_tgt = <unsigned int>c_src
    py_tgt = CUInt()
    (<unsigned int*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLong( self, _CLong cobject ):
    " set self from a CLong instance"
    (<unsigned short*>self.p)[0] = <unsigned short>(<long*>cobject.p)[0]
  def init_CLong( self, _CLong cobject ):
    " set a CLong instance from self "
    (<long*>cobject.p)[0] = <long>(<unsigned short*>self.p)[0]
  def to_CLong( self ):
    " cast self to new CLong instance "
    cdef unsigned short c_src
    cdef long c_tgt
    cdef _CUShort py_src
    cdef _CLong py_tgt
    c_src = (<unsigned short*>self.p)[0]
    c_tgt = <long>c_src
    py_tgt = CLong()
    (<long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CULong( self, _CULong cobject ):
    " set self from a CULong instance"
    (<unsigned short*>self.p)[0] = <unsigned short>(<unsigned long*>cobject.p)[0]
  def init_CULong( self, _CULong cobject ):
    " set a CULong instance from self "
    (<unsigned long*>cobject.p)[0] = <unsigned long>(<unsigned short*>self.p)[0]
  def to_CULong( self ):
    " cast self to new CULong instance "
    cdef unsigned short c_src
    cdef unsigned long c_tgt
    cdef _CUShort py_src
    cdef _CULong py_tgt
    c_src = (<unsigned short*>self.p)[0]
    c_tgt = <unsigned long>c_src
    py_tgt = CULong()
    (<unsigned long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLLong( self, _CLLong cobject ):
    " set self from a CLLong instance"
    (<unsigned short*>self.p)[0] = <unsigned short>(<long long*>cobject.p)[0]
  def init_CLLong( self, _CLLong cobject ):
    " set a CLLong instance from self "
    (<long long*>cobject.p)[0] = <long long>(<unsigned short*>self.p)[0]
  def to_CLLong( self ):
    " cast self to new CLLong instance "
    cdef unsigned short c_src
    cdef long long c_tgt
    cdef _CUShort py_src
    cdef _CLLong py_tgt
    c_src = (<unsigned short*>self.p)[0]
    c_tgt = <long long>c_src
    py_tgt = CLLong()
    (<long long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CULLong( self, _CULLong cobject ):
    " set self from a CULLong instance"
    (<unsigned short*>self.p)[0] = <unsigned short>(<unsigned long long*>cobject.p)[0]
  def init_CULLong( self, _CULLong cobject ):
    " set a CULLong instance from self "
    (<unsigned long long*>cobject.p)[0] = <unsigned long long>(<unsigned short*>self.p)[0]
  def to_CULLong( self ):
    " cast self to new CULLong instance "
    cdef unsigned short c_src
    cdef unsigned long long c_tgt
    cdef _CUShort py_src
    cdef _CULLong py_tgt
    c_src = (<unsigned short*>self.p)[0]
    c_tgt = <unsigned long long>c_src
    py_tgt = CULLong()
    (<unsigned long long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CFloat( self, _CFloat cobject ):
    " set self from a CFloat instance"
    (<unsigned short*>self.p)[0] = <unsigned short>(<float*>cobject.p)[0]
  def init_CFloat( self, _CFloat cobject ):
    " set a CFloat instance from self "
    (<float*>cobject.p)[0] = <float>(<unsigned short*>self.p)[0]
  def to_CFloat( self ):
    " cast self to new CFloat instance "
    cdef unsigned short c_src
    cdef float c_tgt
    cdef _CUShort py_src
    cdef _CFloat py_tgt
    c_src = (<unsigned short*>self.p)[0]
    c_tgt = <float>c_src
    py_tgt = CFloat()
    (<float*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CDouble( self, _CDouble cobject ):
    " set self from a CDouble instance"
    (<unsigned short*>self.p)[0] = <unsigned short>(<double*>cobject.p)[0]
  def init_CDouble( self, _CDouble cobject ):
    " set a CDouble instance from self "
    (<double*>cobject.p)[0] = <double>(<unsigned short*>self.p)[0]
  def to_CDouble( self ):
    " cast self to new CDouble instance "
    cdef unsigned short c_src
    cdef double c_tgt
    cdef _CUShort py_src
    cdef _CDouble py_tgt
    c_src = (<unsigned short*>self.p)[0]
    c_tgt = <double>c_src
    py_tgt = CDouble()
    (<double*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLDouble( self, _CLDouble cobject ):
    " set self from a CLDouble instance"
    (<unsigned short*>self.p)[0] = <unsigned short>(<long double*>cobject.p)[0]
  def init_CLDouble( self, _CLDouble cobject ):
    " set a CLDouble instance from self "
    (<long double*>cobject.p)[0] = <long double>(<unsigned short*>self.p)[0]
  def to_CLDouble( self ):
    " cast self to new CLDouble instance "
    cdef unsigned short c_src
    cdef long double c_tgt
    cdef _CUShort py_src
    cdef _CLDouble py_tgt
    c_src = (<unsigned short*>self.p)[0]
    c_tgt = <long double>c_src
    py_tgt = CLDouble()
    (<long double*>py_tgt.p)[0] = c_tgt
    return py_tgt
CUShort = Meta('CUShort', (_CUShort,), {} )
CUShort.basetype = CUShort
CUShort.sizeof = sizeof(unsigned short)

#cdef public class _CInt(_CObject)[ object AdaptObj_CInt, type AdaptType_CInt ]:
cdef class _CInt(_CObject):
  def __init__( self, value = None, addr = None ):
    cdef int*p
    cdef long c_addr
    cdef _CObject cobject
    if addr is None:
      p = <int*>pyx_calloc(1,sizeof(int))
      self.p = <void*>p
      if isinstance(value,CObject):
        if isinstance(value,_CInt):
          cobject = value
          p[0] = (<int*>cobject.p)[0]
        else:
          value.init_CInt(self)
      elif value is not None:
        p[0] = value
      else:
        p[0] = 0
      self.malloced = True
    else:
      c_addr = addr
      self.p = <void*>c_addr
      self.malloced = False
  def __int__( self ):
    cdef int *p
    assert self.p != NULL
    p = <int*>self.p
    return int(p[0])
  def __float__( self ):
    cdef int *p
    assert self.p != NULL
    p = <int*>self.p
    return float(p[0])
  def __add__( x, y ):
    cdef int val
    cdef _CInt self
    if not isinstance(x,CInt):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<int*>self.p)[0]
    val = val + y
    return CInt(val)
  def __sub__( x, y ):
    cdef int val
    cdef _CInt self
    if not isinstance(x,CInt):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<int*>self.p)[0]
    val = val - y
    return CInt(val)
  def __mul__( x, y ):
    cdef int val
    cdef _CInt self
    if not isinstance(x,CInt):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<int*>self.p)[0]
    val = val + y
    return CInt(val)
  def __repr__( self ):
    cdef long c_addr
    cdef int c_val
    c_addr = <long>self.p
    value = ""
    if c_addr != 0:
      c_val = (<int*>self.p)[0]
      value = ", value = %s" % str( c_val )
    return "%s( addr = %s%s )" % (self.__class__.__name__, hex(c_addr), value)
  def set_value( self, value ):
    if isinstance(value,CObject):
      value.init_CInt(self)
    else:
      (<int*>self.p)[0] = value
  def get_value( self ):
    return (<int*>self.p)[0]
  def to_CInt(self):
    return self
  def init_from( self, _CInt cobject ):
    " init self from a CInt instance "
#    if not self.is_compatible(cobject):
    if not isinstance( cobject, CInt ):
      raise TypeError("%s cannot be set from %s" % (self.__class__, cobject))
    (<int*>self.p)[0] = (<int*>cobject.p)[0]
  def get_basetype( self ):
    return CInt
#  def sizeof( self ):
#    return sizeof(int)
#  def is_compatible( self, _CObject cobject ):
#    return isinstance( cobject, CInt )
  def __str__( self ):
    cdef long c_addr
    cdef int c_val
    c_addr = <long>self.p
    value = ""
    if c_addr != 0:
      c_val = (<int*>self.p)[0]
      value = str( c_val )
    return value
#  def __add__( x, y ):
#    cdef _CInt z
#    if isinstance(x,CInt):
#      z = x
#      return (<int*>z.p)[0] + y
#    elif isinstance(y,CInt):
#      z = y
#      return x + (<int*>z.p)[0]
#    return NotImplemented
#  def __sub__( x, y ):
#    cdef _CInt z
#    if isinstance(x,CInt):
#      z = x
#      return (<int*>z.p)[0] - y
#    elif isinstance(y,CInt):
#      z = y
#      return x - (<int*>z.p)[0]
#    return NotImplemented
  def from_CChar( self, _CChar cobject ):
    " set self from a CChar instance"
    (<int*>self.p)[0] = <int>(<char*>cobject.p)[0]
  def init_CChar( self, _CChar cobject ):
    " set a CChar instance from self "
    (<char*>cobject.p)[0] = <char>(<int*>self.p)[0]
  def to_CChar( self ):
    " cast self to new CChar instance "
    cdef int c_src
    cdef char c_tgt
    cdef _CInt py_src
    cdef _CChar py_tgt
    c_src = (<int*>self.p)[0]
    c_tgt = <char>c_src
    py_tgt = CChar()
    (<char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CSChar( self, _CSChar cobject ):
    " set self from a CSChar instance"
    (<int*>self.p)[0] = <int>(<signed char*>cobject.p)[0]
  def init_CSChar( self, _CSChar cobject ):
    " set a CSChar instance from self "
    (<signed char*>cobject.p)[0] = <signed char>(<int*>self.p)[0]
  def to_CSChar( self ):
    " cast self to new CSChar instance "
    cdef int c_src
    cdef signed char c_tgt
    cdef _CInt py_src
    cdef _CSChar py_tgt
    c_src = (<int*>self.p)[0]
    c_tgt = <signed char>c_src
    py_tgt = CSChar()
    (<signed char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUChar( self, _CUChar cobject ):
    " set self from a CUChar instance"
    (<int*>self.p)[0] = <int>(<unsigned char*>cobject.p)[0]
  def init_CUChar( self, _CUChar cobject ):
    " set a CUChar instance from self "
    (<unsigned char*>cobject.p)[0] = <unsigned char>(<int*>self.p)[0]
  def to_CUChar( self ):
    " cast self to new CUChar instance "
    cdef int c_src
    cdef unsigned char c_tgt
    cdef _CInt py_src
    cdef _CUChar py_tgt
    c_src = (<int*>self.p)[0]
    c_tgt = <unsigned char>c_src
    py_tgt = CUChar()
    (<unsigned char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CShort( self, _CShort cobject ):
    " set self from a CShort instance"
    (<int*>self.p)[0] = <int>(<short*>cobject.p)[0]
  def init_CShort( self, _CShort cobject ):
    " set a CShort instance from self "
    (<short*>cobject.p)[0] = <short>(<int*>self.p)[0]
  def to_CShort( self ):
    " cast self to new CShort instance "
    cdef int c_src
    cdef short c_tgt
    cdef _CInt py_src
    cdef _CShort py_tgt
    c_src = (<int*>self.p)[0]
    c_tgt = <short>c_src
    py_tgt = CShort()
    (<short*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUShort( self, _CUShort cobject ):
    " set self from a CUShort instance"
    (<int*>self.p)[0] = <int>(<unsigned short*>cobject.p)[0]
  def init_CUShort( self, _CUShort cobject ):
    " set a CUShort instance from self "
    (<unsigned short*>cobject.p)[0] = <unsigned short>(<int*>self.p)[0]
  def to_CUShort( self ):
    " cast self to new CUShort instance "
    cdef int c_src
    cdef unsigned short c_tgt
    cdef _CInt py_src
    cdef _CUShort py_tgt
    c_src = (<int*>self.p)[0]
    c_tgt = <unsigned short>c_src
    py_tgt = CUShort()
    (<unsigned short*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CInt( self, _CInt cobject ):
    " set self from a CInt instance"
    (<int*>self.p)[0] = <int>(<int*>cobject.p)[0]
  def init_CInt( self, _CInt cobject ):
    " set a CInt instance from self "
    (<int*>cobject.p)[0] = <int>(<int*>self.p)[0]
  def from_CUInt( self, _CUInt cobject ):
    " set self from a CUInt instance"
    (<int*>self.p)[0] = <int>(<unsigned int*>cobject.p)[0]
  def init_CUInt( self, _CUInt cobject ):
    " set a CUInt instance from self "
    (<unsigned int*>cobject.p)[0] = <unsigned int>(<int*>self.p)[0]
  def to_CUInt( self ):
    " cast self to new CUInt instance "
    cdef int c_src
    cdef unsigned int c_tgt
    cdef _CInt py_src
    cdef _CUInt py_tgt
    c_src = (<int*>self.p)[0]
    c_tgt = <unsigned int>c_src
    py_tgt = CUInt()
    (<unsigned int*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLong( self, _CLong cobject ):
    " set self from a CLong instance"
    (<int*>self.p)[0] = <int>(<long*>cobject.p)[0]
  def init_CLong( self, _CLong cobject ):
    " set a CLong instance from self "
    (<long*>cobject.p)[0] = <long>(<int*>self.p)[0]
  def to_CLong( self ):
    " cast self to new CLong instance "
    cdef int c_src
    cdef long c_tgt
    cdef _CInt py_src
    cdef _CLong py_tgt
    c_src = (<int*>self.p)[0]
    c_tgt = <long>c_src
    py_tgt = CLong()
    (<long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CULong( self, _CULong cobject ):
    " set self from a CULong instance"
    (<int*>self.p)[0] = <int>(<unsigned long*>cobject.p)[0]
  def init_CULong( self, _CULong cobject ):
    " set a CULong instance from self "
    (<unsigned long*>cobject.p)[0] = <unsigned long>(<int*>self.p)[0]
  def to_CULong( self ):
    " cast self to new CULong instance "
    cdef int c_src
    cdef unsigned long c_tgt
    cdef _CInt py_src
    cdef _CULong py_tgt
    c_src = (<int*>self.p)[0]
    c_tgt = <unsigned long>c_src
    py_tgt = CULong()
    (<unsigned long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLLong( self, _CLLong cobject ):
    " set self from a CLLong instance"
    (<int*>self.p)[0] = <int>(<long long*>cobject.p)[0]
  def init_CLLong( self, _CLLong cobject ):
    " set a CLLong instance from self "
    (<long long*>cobject.p)[0] = <long long>(<int*>self.p)[0]
  def to_CLLong( self ):
    " cast self to new CLLong instance "
    cdef int c_src
    cdef long long c_tgt
    cdef _CInt py_src
    cdef _CLLong py_tgt
    c_src = (<int*>self.p)[0]
    c_tgt = <long long>c_src
    py_tgt = CLLong()
    (<long long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CULLong( self, _CULLong cobject ):
    " set self from a CULLong instance"
    (<int*>self.p)[0] = <int>(<unsigned long long*>cobject.p)[0]
  def init_CULLong( self, _CULLong cobject ):
    " set a CULLong instance from self "
    (<unsigned long long*>cobject.p)[0] = <unsigned long long>(<int*>self.p)[0]
  def to_CULLong( self ):
    " cast self to new CULLong instance "
    cdef int c_src
    cdef unsigned long long c_tgt
    cdef _CInt py_src
    cdef _CULLong py_tgt
    c_src = (<int*>self.p)[0]
    c_tgt = <unsigned long long>c_src
    py_tgt = CULLong()
    (<unsigned long long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CFloat( self, _CFloat cobject ):
    " set self from a CFloat instance"
    (<int*>self.p)[0] = <int>(<float*>cobject.p)[0]
  def init_CFloat( self, _CFloat cobject ):
    " set a CFloat instance from self "
    (<float*>cobject.p)[0] = <float>(<int*>self.p)[0]
  def to_CFloat( self ):
    " cast self to new CFloat instance "
    cdef int c_src
    cdef float c_tgt
    cdef _CInt py_src
    cdef _CFloat py_tgt
    c_src = (<int*>self.p)[0]
    c_tgt = <float>c_src
    py_tgt = CFloat()
    (<float*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CDouble( self, _CDouble cobject ):
    " set self from a CDouble instance"
    (<int*>self.p)[0] = <int>(<double*>cobject.p)[0]
  def init_CDouble( self, _CDouble cobject ):
    " set a CDouble instance from self "
    (<double*>cobject.p)[0] = <double>(<int*>self.p)[0]
  def to_CDouble( self ):
    " cast self to new CDouble instance "
    cdef int c_src
    cdef double c_tgt
    cdef _CInt py_src
    cdef _CDouble py_tgt
    c_src = (<int*>self.p)[0]
    c_tgt = <double>c_src
    py_tgt = CDouble()
    (<double*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLDouble( self, _CLDouble cobject ):
    " set self from a CLDouble instance"
    (<int*>self.p)[0] = <int>(<long double*>cobject.p)[0]
  def init_CLDouble( self, _CLDouble cobject ):
    " set a CLDouble instance from self "
    (<long double*>cobject.p)[0] = <long double>(<int*>self.p)[0]
  def to_CLDouble( self ):
    " cast self to new CLDouble instance "
    cdef int c_src
    cdef long double c_tgt
    cdef _CInt py_src
    cdef _CLDouble py_tgt
    c_src = (<int*>self.p)[0]
    c_tgt = <long double>c_src
    py_tgt = CLDouble()
    (<long double*>py_tgt.p)[0] = c_tgt
    return py_tgt
CInt = Meta('CInt', (_CInt,), {} )
CInt.basetype = CInt
CInt.sizeof = sizeof(int)

#cdef public class _CUInt(_CObject)[ object AdaptObj_CUInt, type AdaptType_CUInt ]:
cdef class _CUInt(_CObject):
  def __init__( self, value = None, addr = None ):
    cdef unsigned int*p
    cdef long c_addr
    cdef _CObject cobject
    if addr is None:
      p = <unsigned int*>pyx_calloc(1,sizeof(unsigned int))
      self.p = <void*>p
      if isinstance(value,CObject):
        if isinstance(value,_CUInt):
          cobject = value
          p[0] = (<unsigned int*>cobject.p)[0]
        else:
          value.init_CUInt(self)
      elif value is not None:
        p[0] = value
      else:
        p[0] = 0
      self.malloced = True
    else:
      c_addr = addr
      self.p = <void*>c_addr
      self.malloced = False
  def __int__( self ):
    cdef unsigned int *p
    assert self.p != NULL
    p = <unsigned int*>self.p
    return int(p[0])
  def __float__( self ):
    cdef unsigned int *p
    assert self.p != NULL
    p = <unsigned int*>self.p
    return float(p[0])
  def __add__( x, y ):
    cdef unsigned int val
    cdef _CUInt self
    if not isinstance(x,CUInt):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<unsigned int*>self.p)[0]
    val = val + y
    return CUInt(val)
  def __sub__( x, y ):
    cdef unsigned int val
    cdef _CUInt self
    if not isinstance(x,CUInt):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<unsigned int*>self.p)[0]
    val = val - y
    return CUInt(val)
  def __mul__( x, y ):
    cdef unsigned int val
    cdef _CUInt self
    if not isinstance(x,CUInt):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<unsigned int*>self.p)[0]
    val = val + y
    return CUInt(val)
  def __repr__( self ):
    cdef long c_addr
    cdef unsigned int c_val
    c_addr = <long>self.p
    value = ""
    if c_addr != 0:
      c_val = (<unsigned int*>self.p)[0]
      value = ", value = %s" % str( c_val )
    return "%s( addr = %s%s )" % (self.__class__.__name__, hex(c_addr), value)
  def set_value( self, value ):
    if isinstance(value,CObject):
      value.init_CUInt(self)
    else:
      (<unsigned int*>self.p)[0] = value
  def get_value( self ):
    return (<unsigned int*>self.p)[0]
  def to_CUInt(self):
    return self
  def init_from( self, _CUInt cobject ):
    " init self from a CUInt instance "
#    if not self.is_compatible(cobject):
    if not isinstance( cobject, CUInt ):
      raise TypeError("%s cannot be set from %s" % (self.__class__, cobject))
    (<unsigned int*>self.p)[0] = (<unsigned int*>cobject.p)[0]
  def get_basetype( self ):
    return CUInt
#  def sizeof( self ):
#    return sizeof(unsigned int)
#  def is_compatible( self, _CObject cobject ):
#    return isinstance( cobject, CUInt )
  def __str__( self ):
    cdef long c_addr
    cdef unsigned int c_val
    c_addr = <long>self.p
    value = ""
    if c_addr != 0:
      c_val = (<unsigned int*>self.p)[0]
      value = str( c_val )
    return value
  def from_CChar( self, _CChar cobject ):
    " set self from a CChar instance"
    (<unsigned int*>self.p)[0] = <unsigned int>(<char*>cobject.p)[0]
  def init_CChar( self, _CChar cobject ):
    " set a CChar instance from self "
    (<char*>cobject.p)[0] = <char>(<unsigned int*>self.p)[0]
  def to_CChar( self ):
    " cast self to new CChar instance "
    cdef unsigned int c_src
    cdef char c_tgt
    cdef _CUInt py_src
    cdef _CChar py_tgt
    c_src = (<unsigned int*>self.p)[0]
    c_tgt = <char>c_src
    py_tgt = CChar()
    (<char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CSChar( self, _CSChar cobject ):
    " set self from a CSChar instance"
    (<unsigned int*>self.p)[0] = <unsigned int>(<signed char*>cobject.p)[0]
  def init_CSChar( self, _CSChar cobject ):
    " set a CSChar instance from self "
    (<signed char*>cobject.p)[0] = <signed char>(<unsigned int*>self.p)[0]
  def to_CSChar( self ):
    " cast self to new CSChar instance "
    cdef unsigned int c_src
    cdef signed char c_tgt
    cdef _CUInt py_src
    cdef _CSChar py_tgt
    c_src = (<unsigned int*>self.p)[0]
    c_tgt = <signed char>c_src
    py_tgt = CSChar()
    (<signed char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUChar( self, _CUChar cobject ):
    " set self from a CUChar instance"
    (<unsigned int*>self.p)[0] = <unsigned int>(<unsigned char*>cobject.p)[0]
  def init_CUChar( self, _CUChar cobject ):
    " set a CUChar instance from self "
    (<unsigned char*>cobject.p)[0] = <unsigned char>(<unsigned int*>self.p)[0]
  def to_CUChar( self ):
    " cast self to new CUChar instance "
    cdef unsigned int c_src
    cdef unsigned char c_tgt
    cdef _CUInt py_src
    cdef _CUChar py_tgt
    c_src = (<unsigned int*>self.p)[0]
    c_tgt = <unsigned char>c_src
    py_tgt = CUChar()
    (<unsigned char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CShort( self, _CShort cobject ):
    " set self from a CShort instance"
    (<unsigned int*>self.p)[0] = <unsigned int>(<short*>cobject.p)[0]
  def init_CShort( self, _CShort cobject ):
    " set a CShort instance from self "
    (<short*>cobject.p)[0] = <short>(<unsigned int*>self.p)[0]
  def to_CShort( self ):
    " cast self to new CShort instance "
    cdef unsigned int c_src
    cdef short c_tgt
    cdef _CUInt py_src
    cdef _CShort py_tgt
    c_src = (<unsigned int*>self.p)[0]
    c_tgt = <short>c_src
    py_tgt = CShort()
    (<short*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUShort( self, _CUShort cobject ):
    " set self from a CUShort instance"
    (<unsigned int*>self.p)[0] = <unsigned int>(<unsigned short*>cobject.p)[0]
  def init_CUShort( self, _CUShort cobject ):
    " set a CUShort instance from self "
    (<unsigned short*>cobject.p)[0] = <unsigned short>(<unsigned int*>self.p)[0]
  def to_CUShort( self ):
    " cast self to new CUShort instance "
    cdef unsigned int c_src
    cdef unsigned short c_tgt
    cdef _CUInt py_src
    cdef _CUShort py_tgt
    c_src = (<unsigned int*>self.p)[0]
    c_tgt = <unsigned short>c_src
    py_tgt = CUShort()
    (<unsigned short*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CInt( self, _CInt cobject ):
    " set self from a CInt instance"
    (<unsigned int*>self.p)[0] = <unsigned int>(<int*>cobject.p)[0]
  def init_CInt( self, _CInt cobject ):
    " set a CInt instance from self "
    (<int*>cobject.p)[0] = <int>(<unsigned int*>self.p)[0]
  def to_CInt( self ):
    " cast self to new CInt instance "
    cdef unsigned int c_src
    cdef int c_tgt
    cdef _CUInt py_src
    cdef _CInt py_tgt
    c_src = (<unsigned int*>self.p)[0]
    c_tgt = <int>c_src
    py_tgt = CInt()
    (<int*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUInt( self, _CUInt cobject ):
    " set self from a CUInt instance"
    (<unsigned int*>self.p)[0] = <unsigned int>(<unsigned int*>cobject.p)[0]
  def init_CUInt( self, _CUInt cobject ):
    " set a CUInt instance from self "
    (<unsigned int*>cobject.p)[0] = <unsigned int>(<unsigned int*>self.p)[0]
  def from_CLong( self, _CLong cobject ):
    " set self from a CLong instance"
    (<unsigned int*>self.p)[0] = <unsigned int>(<long*>cobject.p)[0]
  def init_CLong( self, _CLong cobject ):
    " set a CLong instance from self "
    (<long*>cobject.p)[0] = <long>(<unsigned int*>self.p)[0]
  def to_CLong( self ):
    " cast self to new CLong instance "
    cdef unsigned int c_src
    cdef long c_tgt
    cdef _CUInt py_src
    cdef _CLong py_tgt
    c_src = (<unsigned int*>self.p)[0]
    c_tgt = <long>c_src
    py_tgt = CLong()
    (<long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CULong( self, _CULong cobject ):
    " set self from a CULong instance"
    (<unsigned int*>self.p)[0] = <unsigned int>(<unsigned long*>cobject.p)[0]
  def init_CULong( self, _CULong cobject ):
    " set a CULong instance from self "
    (<unsigned long*>cobject.p)[0] = <unsigned long>(<unsigned int*>self.p)[0]
  def to_CULong( self ):
    " cast self to new CULong instance "
    cdef unsigned int c_src
    cdef unsigned long c_tgt
    cdef _CUInt py_src
    cdef _CULong py_tgt
    c_src = (<unsigned int*>self.p)[0]
    c_tgt = <unsigned long>c_src
    py_tgt = CULong()
    (<unsigned long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLLong( self, _CLLong cobject ):
    " set self from a CLLong instance"
    (<unsigned int*>self.p)[0] = <unsigned int>(<long long*>cobject.p)[0]
  def init_CLLong( self, _CLLong cobject ):
    " set a CLLong instance from self "
    (<long long*>cobject.p)[0] = <long long>(<unsigned int*>self.p)[0]
  def to_CLLong( self ):
    " cast self to new CLLong instance "
    cdef unsigned int c_src
    cdef long long c_tgt
    cdef _CUInt py_src
    cdef _CLLong py_tgt
    c_src = (<unsigned int*>self.p)[0]
    c_tgt = <long long>c_src
    py_tgt = CLLong()
    (<long long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CULLong( self, _CULLong cobject ):
    " set self from a CULLong instance"
    (<unsigned int*>self.p)[0] = <unsigned int>(<unsigned long long*>cobject.p)[0]
  def init_CULLong( self, _CULLong cobject ):
    " set a CULLong instance from self "
    (<unsigned long long*>cobject.p)[0] = <unsigned long long>(<unsigned int*>self.p)[0]
  def to_CULLong( self ):
    " cast self to new CULLong instance "
    cdef unsigned int c_src
    cdef unsigned long long c_tgt
    cdef _CUInt py_src
    cdef _CULLong py_tgt
    c_src = (<unsigned int*>self.p)[0]
    c_tgt = <unsigned long long>c_src
    py_tgt = CULLong()
    (<unsigned long long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CFloat( self, _CFloat cobject ):
    " set self from a CFloat instance"
    (<unsigned int*>self.p)[0] = <unsigned int>(<float*>cobject.p)[0]
  def init_CFloat( self, _CFloat cobject ):
    " set a CFloat instance from self "
    (<float*>cobject.p)[0] = <float>(<unsigned int*>self.p)[0]
  def to_CFloat( self ):
    " cast self to new CFloat instance "
    cdef unsigned int c_src
    cdef float c_tgt
    cdef _CUInt py_src
    cdef _CFloat py_tgt
    c_src = (<unsigned int*>self.p)[0]
    c_tgt = <float>c_src
    py_tgt = CFloat()
    (<float*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CDouble( self, _CDouble cobject ):
    " set self from a CDouble instance"
    (<unsigned int*>self.p)[0] = <unsigned int>(<double*>cobject.p)[0]
  def init_CDouble( self, _CDouble cobject ):
    " set a CDouble instance from self "
    (<double*>cobject.p)[0] = <double>(<unsigned int*>self.p)[0]
  def to_CDouble( self ):
    " cast self to new CDouble instance "
    cdef unsigned int c_src
    cdef double c_tgt
    cdef _CUInt py_src
    cdef _CDouble py_tgt
    c_src = (<unsigned int*>self.p)[0]
    c_tgt = <double>c_src
    py_tgt = CDouble()
    (<double*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLDouble( self, _CLDouble cobject ):
    " set self from a CLDouble instance"
    (<unsigned int*>self.p)[0] = <unsigned int>(<long double*>cobject.p)[0]
  def init_CLDouble( self, _CLDouble cobject ):
    " set a CLDouble instance from self "
    (<long double*>cobject.p)[0] = <long double>(<unsigned int*>self.p)[0]
  def to_CLDouble( self ):
    " cast self to new CLDouble instance "
    cdef unsigned int c_src
    cdef long double c_tgt
    cdef _CUInt py_src
    cdef _CLDouble py_tgt
    c_src = (<unsigned int*>self.p)[0]
    c_tgt = <long double>c_src
    py_tgt = CLDouble()
    (<long double*>py_tgt.p)[0] = c_tgt
    return py_tgt
CUInt = Meta('CUInt', (_CUInt,), {} )
CUInt.basetype = CUInt
CUInt.sizeof = sizeof(unsigned int)

#cdef public class _CLong(_CObject)[ object AdaptObj_CLong, type AdaptType_CLong ]:
cdef class _CLong(_CObject):
  def __init__( self, value = None, addr = None ):
    cdef long*p
    cdef long c_addr
    cdef _CObject cobject
    if addr is None:
      p = <long*>pyx_calloc(1,sizeof(long))
      self.p = <void*>p
      if isinstance(value,CObject):
        if isinstance(value,_CLong):
          cobject = value
          p[0] = (<long*>cobject.p)[0]
        else:
          value.init_CLong(self)
      elif value is not None:
        p[0] = value
      else:
        p[0] = 0
      self.malloced = True
    else:
      c_addr = addr
      self.p = <void*>c_addr
      self.malloced = False
  def __int__( self ):
    cdef long *p
    assert self.p != NULL
    p = <long*>self.p
    return int(p[0])
  def __float__( self ):
    cdef long *p
    assert self.p != NULL
    p = <long*>self.p
    return float(p[0])
  def __add__( x, y ):
    cdef long val
    cdef _CLong self
    if not isinstance(x,CLong):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<long*>self.p)[0]
    val = val + y
    return CLong(val)
  def __sub__( x, y ):
    cdef long val
    cdef _CLong self
    if not isinstance(x,CLong):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<long*>self.p)[0]
    val = val - y
    return CLong(val)
  def __mul__( x, y ):
    cdef long val
    cdef _CLong self
    if not isinstance(x,CLong):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<long*>self.p)[0]
    val = val + y
    return CLong(val)
  def __repr__( self ):
    cdef long c_addr
    cdef long c_val
    c_addr = <long>self.p
    value = ""
    if c_addr != 0:
      c_val = (<long*>self.p)[0]
      value = ", value = %s" % str( c_val )
    return "%s( addr = %s%s )" % (self.__class__.__name__, hex(c_addr), value)
  def set_value( self, value ):
    if isinstance(value,CObject):
      value.init_CLong(self)
    else:
      (<long*>self.p)[0] = value
  def get_value( self ):
    return (<long*>self.p)[0]
  def to_CLong(self):
    return self
  def init_from( self, _CLong cobject ):
    " init self from a CLong instance "
#    if not self.is_compatible(cobject):
    if not isinstance( cobject, CLong ):
      raise TypeError("%s cannot be set from %s" % (self.__class__, cobject))
    (<long*>self.p)[0] = (<long*>cobject.p)[0]
  def get_basetype( self ):
    return CLong
#  def sizeof( self ):
#    return sizeof(long)
#  def is_compatible( self, _CObject cobject ):
#    return isinstance( cobject, CLong )
  def __str__( self ):
    cdef long c_addr
    cdef long c_val
    c_addr = <long>self.p
    value = ""
    if c_addr != 0:
      c_val = (<long*>self.p)[0]
      value = str( c_val )
    return value
  def from_CChar( self, _CChar cobject ):
    " set self from a CChar instance"
    (<long*>self.p)[0] = <long>(<char*>cobject.p)[0]
  def init_CChar( self, _CChar cobject ):
    " set a CChar instance from self "
    (<char*>cobject.p)[0] = <char>(<long*>self.p)[0]
  def to_CChar( self ):
    " cast self to new CChar instance "
    cdef long c_src
    cdef char c_tgt
    cdef _CLong py_src
    cdef _CChar py_tgt
    c_src = (<long*>self.p)[0]
    c_tgt = <char>c_src
    py_tgt = CChar()
    (<char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CSChar( self, _CSChar cobject ):
    " set self from a CSChar instance"
    (<long*>self.p)[0] = <long>(<signed char*>cobject.p)[0]
  def init_CSChar( self, _CSChar cobject ):
    " set a CSChar instance from self "
    (<signed char*>cobject.p)[0] = <signed char>(<long*>self.p)[0]
  def to_CSChar( self ):
    " cast self to new CSChar instance "
    cdef long c_src
    cdef signed char c_tgt
    cdef _CLong py_src
    cdef _CSChar py_tgt
    c_src = (<long*>self.p)[0]
    c_tgt = <signed char>c_src
    py_tgt = CSChar()
    (<signed char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUChar( self, _CUChar cobject ):
    " set self from a CUChar instance"
    (<long*>self.p)[0] = <long>(<unsigned char*>cobject.p)[0]
  def init_CUChar( self, _CUChar cobject ):
    " set a CUChar instance from self "
    (<unsigned char*>cobject.p)[0] = <unsigned char>(<long*>self.p)[0]
  def to_CUChar( self ):
    " cast self to new CUChar instance "
    cdef long c_src
    cdef unsigned char c_tgt
    cdef _CLong py_src
    cdef _CUChar py_tgt
    c_src = (<long*>self.p)[0]
    c_tgt = <unsigned char>c_src
    py_tgt = CUChar()
    (<unsigned char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CShort( self, _CShort cobject ):
    " set self from a CShort instance"
    (<long*>self.p)[0] = <long>(<short*>cobject.p)[0]
  def init_CShort( self, _CShort cobject ):
    " set a CShort instance from self "
    (<short*>cobject.p)[0] = <short>(<long*>self.p)[0]
  def to_CShort( self ):
    " cast self to new CShort instance "
    cdef long c_src
    cdef short c_tgt
    cdef _CLong py_src
    cdef _CShort py_tgt
    c_src = (<long*>self.p)[0]
    c_tgt = <short>c_src
    py_tgt = CShort()
    (<short*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUShort( self, _CUShort cobject ):
    " set self from a CUShort instance"
    (<long*>self.p)[0] = <long>(<unsigned short*>cobject.p)[0]
  def init_CUShort( self, _CUShort cobject ):
    " set a CUShort instance from self "
    (<unsigned short*>cobject.p)[0] = <unsigned short>(<long*>self.p)[0]
  def to_CUShort( self ):
    " cast self to new CUShort instance "
    cdef long c_src
    cdef unsigned short c_tgt
    cdef _CLong py_src
    cdef _CUShort py_tgt
    c_src = (<long*>self.p)[0]
    c_tgt = <unsigned short>c_src
    py_tgt = CUShort()
    (<unsigned short*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CInt( self, _CInt cobject ):
    " set self from a CInt instance"
    (<long*>self.p)[0] = <long>(<int*>cobject.p)[0]
  def init_CInt( self, _CInt cobject ):
    " set a CInt instance from self "
    (<int*>cobject.p)[0] = <int>(<long*>self.p)[0]
  def to_CInt( self ):
    " cast self to new CInt instance "
    cdef long c_src
    cdef int c_tgt
    cdef _CLong py_src
    cdef _CInt py_tgt
    c_src = (<long*>self.p)[0]
    c_tgt = <int>c_src
    py_tgt = CInt()
    (<int*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUInt( self, _CUInt cobject ):
    " set self from a CUInt instance"
    (<long*>self.p)[0] = <long>(<unsigned int*>cobject.p)[0]
  def init_CUInt( self, _CUInt cobject ):
    " set a CUInt instance from self "
    (<unsigned int*>cobject.p)[0] = <unsigned int>(<long*>self.p)[0]
  def to_CUInt( self ):
    " cast self to new CUInt instance "
    cdef long c_src
    cdef unsigned int c_tgt
    cdef _CLong py_src
    cdef _CUInt py_tgt
    c_src = (<long*>self.p)[0]
    c_tgt = <unsigned int>c_src
    py_tgt = CUInt()
    (<unsigned int*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLong( self, _CLong cobject ):
    " set self from a CLong instance"
    (<long*>self.p)[0] = <long>(<long*>cobject.p)[0]
  def init_CLong( self, _CLong cobject ):
    " set a CLong instance from self "
    (<long*>cobject.p)[0] = <long>(<long*>self.p)[0]
  def from_CULong( self, _CULong cobject ):
    " set self from a CULong instance"
    (<long*>self.p)[0] = <long>(<unsigned long*>cobject.p)[0]
  def init_CULong( self, _CULong cobject ):
    " set a CULong instance from self "
    (<unsigned long*>cobject.p)[0] = <unsigned long>(<long*>self.p)[0]
  def to_CULong( self ):
    " cast self to new CULong instance "
    cdef long c_src
    cdef unsigned long c_tgt
    cdef _CLong py_src
    cdef _CULong py_tgt
    c_src = (<long*>self.p)[0]
    c_tgt = <unsigned long>c_src
    py_tgt = CULong()
    (<unsigned long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLLong( self, _CLLong cobject ):
    " set self from a CLLong instance"
    (<long*>self.p)[0] = <long>(<long long*>cobject.p)[0]
  def init_CLLong( self, _CLLong cobject ):
    " set a CLLong instance from self "
    (<long long*>cobject.p)[0] = <long long>(<long*>self.p)[0]
  def to_CLLong( self ):
    " cast self to new CLLong instance "
    cdef long c_src
    cdef long long c_tgt
    cdef _CLong py_src
    cdef _CLLong py_tgt
    c_src = (<long*>self.p)[0]
    c_tgt = <long long>c_src
    py_tgt = CLLong()
    (<long long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CULLong( self, _CULLong cobject ):
    " set self from a CULLong instance"
    (<long*>self.p)[0] = <long>(<unsigned long long*>cobject.p)[0]
  def init_CULLong( self, _CULLong cobject ):
    " set a CULLong instance from self "
    (<unsigned long long*>cobject.p)[0] = <unsigned long long>(<long*>self.p)[0]
  def to_CULLong( self ):
    " cast self to new CULLong instance "
    cdef long c_src
    cdef unsigned long long c_tgt
    cdef _CLong py_src
    cdef _CULLong py_tgt
    c_src = (<long*>self.p)[0]
    c_tgt = <unsigned long long>c_src
    py_tgt = CULLong()
    (<unsigned long long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CFloat( self, _CFloat cobject ):
    " set self from a CFloat instance"
    (<long*>self.p)[0] = <long>(<float*>cobject.p)[0]
  def init_CFloat( self, _CFloat cobject ):
    " set a CFloat instance from self "
    (<float*>cobject.p)[0] = <float>(<long*>self.p)[0]
  def to_CFloat( self ):
    " cast self to new CFloat instance "
    cdef long c_src
    cdef float c_tgt
    cdef _CLong py_src
    cdef _CFloat py_tgt
    c_src = (<long*>self.p)[0]
    c_tgt = <float>c_src
    py_tgt = CFloat()
    (<float*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CDouble( self, _CDouble cobject ):
    " set self from a CDouble instance"
    (<long*>self.p)[0] = <long>(<double*>cobject.p)[0]
  def init_CDouble( self, _CDouble cobject ):
    " set a CDouble instance from self "
    (<double*>cobject.p)[0] = <double>(<long*>self.p)[0]
  def to_CDouble( self ):
    " cast self to new CDouble instance "
    cdef long c_src
    cdef double c_tgt
    cdef _CLong py_src
    cdef _CDouble py_tgt
    c_src = (<long*>self.p)[0]
    c_tgt = <double>c_src
    py_tgt = CDouble()
    (<double*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLDouble( self, _CLDouble cobject ):
    " set self from a CLDouble instance"
    (<long*>self.p)[0] = <long>(<long double*>cobject.p)[0]
  def init_CLDouble( self, _CLDouble cobject ):
    " set a CLDouble instance from self "
    (<long double*>cobject.p)[0] = <long double>(<long*>self.p)[0]
  def to_CLDouble( self ):
    " cast self to new CLDouble instance "
    cdef long c_src
    cdef long double c_tgt
    cdef _CLong py_src
    cdef _CLDouble py_tgt
    c_src = (<long*>self.p)[0]
    c_tgt = <long double>c_src
    py_tgt = CLDouble()
    (<long double*>py_tgt.p)[0] = c_tgt
    return py_tgt
CLong = Meta('CLong', (_CLong,), {} )
CLong.basetype = CLong
CLong.sizeof = sizeof(long)

#cdef public class _CULong(_CObject)[ object AdaptObj_CULong, type AdaptType_CULong ]:
cdef class _CULong(_CObject):
  def __init__( self, value = None, addr = None ):
    cdef unsigned long*p
    cdef long c_addr
    cdef _CObject cobject
    if addr is None:
      p = <unsigned long*>pyx_calloc(1,sizeof(unsigned long))
      self.p = <void*>p
      if isinstance(value,CObject):
        if isinstance(value,_CULong):
          cobject = value
          p[0] = (<unsigned long*>cobject.p)[0]
        else:
          value.init_CULong(self)
      elif value is not None:
        p[0] = value
      else:
        p[0] = 0
      self.malloced = True
    else:
      c_addr = addr
      self.p = <void*>c_addr
      self.malloced = False
  def __int__( self ):
    cdef unsigned long *p
    assert self.p != NULL
    p = <unsigned long*>self.p
    return int(p[0])
  def __float__( self ):
    cdef unsigned long *p
    assert self.p != NULL
    p = <unsigned long*>self.p
    return float(p[0])
  def __add__( x, y ):
    cdef unsigned long val
    cdef _CULong self
    if not isinstance(x,CULong):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<unsigned long*>self.p)[0]
    val = val + y
    return CULong(val)
  def __sub__( x, y ):
    cdef unsigned long val
    cdef _CULong self
    if not isinstance(x,CULong):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<unsigned long*>self.p)[0]
    val = val - y
    return CULong(val)
  def __mul__( x, y ):
    cdef unsigned long val
    cdef _CULong self
    if not isinstance(x,CULong):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<unsigned long*>self.p)[0]
    val = val + y
    return CULong(val)
  def __repr__( self ):
    cdef long c_addr
    cdef unsigned long c_val
    c_addr = <long>self.p
    value = ""
    if c_addr != 0:
      c_val = (<unsigned long*>self.p)[0]
      value = ", value = %s" % str( c_val )
    return "%s( addr = %s%s )" % (self.__class__.__name__, hex(c_addr), value)
  def set_value( self, value ):
    if isinstance(value,CObject):
      value.init_CULong(self)
    else:
      (<unsigned long*>self.p)[0] = value
  def get_value( self ):
    return (<unsigned long*>self.p)[0]
  def to_CULong(self):
    return self
  def init_from( self, _CULong cobject ):
    " init self from a CULong instance "
#    if not self.is_compatible(cobject):
    if not isinstance( cobject, CULong ):
      raise TypeError("%s cannot be set from %s" % (self.__class__, cobject))
    (<unsigned long*>self.p)[0] = (<unsigned long*>cobject.p)[0]
  def get_basetype( self ):
    return CULong
#  def sizeof( self ):
#    return sizeof(unsigned long)
#  def is_compatible( self, _CObject cobject ):
#    return isinstance( cobject, CULong )
  def __str__( self ):
    cdef long c_addr
    cdef unsigned long c_val
    c_addr = <long>self.p
    value = ""
    if c_addr != 0:
      c_val = (<unsigned long*>self.p)[0]
      value = str( c_val )
    return value
  def from_CChar( self, _CChar cobject ):
    " set self from a CChar instance"
    (<unsigned long*>self.p)[0] = <unsigned long>(<char*>cobject.p)[0]
  def init_CChar( self, _CChar cobject ):
    " set a CChar instance from self "
    (<char*>cobject.p)[0] = <char>(<unsigned long*>self.p)[0]
  def to_CChar( self ):
    " cast self to new CChar instance "
    cdef unsigned long c_src
    cdef char c_tgt
    cdef _CULong py_src
    cdef _CChar py_tgt
    c_src = (<unsigned long*>self.p)[0]
    c_tgt = <char>c_src
    py_tgt = CChar()
    (<char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CSChar( self, _CSChar cobject ):
    " set self from a CSChar instance"
    (<unsigned long*>self.p)[0] = <unsigned long>(<signed char*>cobject.p)[0]
  def init_CSChar( self, _CSChar cobject ):
    " set a CSChar instance from self "
    (<signed char*>cobject.p)[0] = <signed char>(<unsigned long*>self.p)[0]
  def to_CSChar( self ):
    " cast self to new CSChar instance "
    cdef unsigned long c_src
    cdef signed char c_tgt
    cdef _CULong py_src
    cdef _CSChar py_tgt
    c_src = (<unsigned long*>self.p)[0]
    c_tgt = <signed char>c_src
    py_tgt = CSChar()
    (<signed char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUChar( self, _CUChar cobject ):
    " set self from a CUChar instance"
    (<unsigned long*>self.p)[0] = <unsigned long>(<unsigned char*>cobject.p)[0]
  def init_CUChar( self, _CUChar cobject ):
    " set a CUChar instance from self "
    (<unsigned char*>cobject.p)[0] = <unsigned char>(<unsigned long*>self.p)[0]
  def to_CUChar( self ):
    " cast self to new CUChar instance "
    cdef unsigned long c_src
    cdef unsigned char c_tgt
    cdef _CULong py_src
    cdef _CUChar py_tgt
    c_src = (<unsigned long*>self.p)[0]
    c_tgt = <unsigned char>c_src
    py_tgt = CUChar()
    (<unsigned char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CShort( self, _CShort cobject ):
    " set self from a CShort instance"
    (<unsigned long*>self.p)[0] = <unsigned long>(<short*>cobject.p)[0]
  def init_CShort( self, _CShort cobject ):
    " set a CShort instance from self "
    (<short*>cobject.p)[0] = <short>(<unsigned long*>self.p)[0]
  def to_CShort( self ):
    " cast self to new CShort instance "
    cdef unsigned long c_src
    cdef short c_tgt
    cdef _CULong py_src
    cdef _CShort py_tgt
    c_src = (<unsigned long*>self.p)[0]
    c_tgt = <short>c_src
    py_tgt = CShort()
    (<short*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUShort( self, _CUShort cobject ):
    " set self from a CUShort instance"
    (<unsigned long*>self.p)[0] = <unsigned long>(<unsigned short*>cobject.p)[0]
  def init_CUShort( self, _CUShort cobject ):
    " set a CUShort instance from self "
    (<unsigned short*>cobject.p)[0] = <unsigned short>(<unsigned long*>self.p)[0]
  def to_CUShort( self ):
    " cast self to new CUShort instance "
    cdef unsigned long c_src
    cdef unsigned short c_tgt
    cdef _CULong py_src
    cdef _CUShort py_tgt
    c_src = (<unsigned long*>self.p)[0]
    c_tgt = <unsigned short>c_src
    py_tgt = CUShort()
    (<unsigned short*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CInt( self, _CInt cobject ):
    " set self from a CInt instance"
    (<unsigned long*>self.p)[0] = <unsigned long>(<int*>cobject.p)[0]
  def init_CInt( self, _CInt cobject ):
    " set a CInt instance from self "
    (<int*>cobject.p)[0] = <int>(<unsigned long*>self.p)[0]
  def to_CInt( self ):
    " cast self to new CInt instance "
    cdef unsigned long c_src
    cdef int c_tgt
    cdef _CULong py_src
    cdef _CInt py_tgt
    c_src = (<unsigned long*>self.p)[0]
    c_tgt = <int>c_src
    py_tgt = CInt()
    (<int*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUInt( self, _CUInt cobject ):
    " set self from a CUInt instance"
    (<unsigned long*>self.p)[0] = <unsigned long>(<unsigned int*>cobject.p)[0]
  def init_CUInt( self, _CUInt cobject ):
    " set a CUInt instance from self "
    (<unsigned int*>cobject.p)[0] = <unsigned int>(<unsigned long*>self.p)[0]
  def to_CUInt( self ):
    " cast self to new CUInt instance "
    cdef unsigned long c_src
    cdef unsigned int c_tgt
    cdef _CULong py_src
    cdef _CUInt py_tgt
    c_src = (<unsigned long*>self.p)[0]
    c_tgt = <unsigned int>c_src
    py_tgt = CUInt()
    (<unsigned int*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLong( self, _CLong cobject ):
    " set self from a CLong instance"
    (<unsigned long*>self.p)[0] = <unsigned long>(<long*>cobject.p)[0]
  def init_CLong( self, _CLong cobject ):
    " set a CLong instance from self "
    (<long*>cobject.p)[0] = <long>(<unsigned long*>self.p)[0]
  def to_CLong( self ):
    " cast self to new CLong instance "
    cdef unsigned long c_src
    cdef long c_tgt
    cdef _CULong py_src
    cdef _CLong py_tgt
    c_src = (<unsigned long*>self.p)[0]
    c_tgt = <long>c_src
    py_tgt = CLong()
    (<long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CULong( self, _CULong cobject ):
    " set self from a CULong instance"
    (<unsigned long*>self.p)[0] = <unsigned long>(<unsigned long*>cobject.p)[0]
  def init_CULong( self, _CULong cobject ):
    " set a CULong instance from self "
    (<unsigned long*>cobject.p)[0] = <unsigned long>(<unsigned long*>self.p)[0]
  def from_CLLong( self, _CLLong cobject ):
    " set self from a CLLong instance"
    (<unsigned long*>self.p)[0] = <unsigned long>(<long long*>cobject.p)[0]
  def init_CLLong( self, _CLLong cobject ):
    " set a CLLong instance from self "
    (<long long*>cobject.p)[0] = <long long>(<unsigned long*>self.p)[0]
  def to_CLLong( self ):
    " cast self to new CLLong instance "
    cdef unsigned long c_src
    cdef long long c_tgt
    cdef _CULong py_src
    cdef _CLLong py_tgt
    c_src = (<unsigned long*>self.p)[0]
    c_tgt = <long long>c_src
    py_tgt = CLLong()
    (<long long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CULLong( self, _CULLong cobject ):
    " set self from a CULLong instance"
    (<unsigned long*>self.p)[0] = <unsigned long>(<unsigned long long*>cobject.p)[0]
  def init_CULLong( self, _CULLong cobject ):
    " set a CULLong instance from self "
    (<unsigned long long*>cobject.p)[0] = <unsigned long long>(<unsigned long*>self.p)[0]
  def to_CULLong( self ):
    " cast self to new CULLong instance "
    cdef unsigned long c_src
    cdef unsigned long long c_tgt
    cdef _CULong py_src
    cdef _CULLong py_tgt
    c_src = (<unsigned long*>self.p)[0]
    c_tgt = <unsigned long long>c_src
    py_tgt = CULLong()
    (<unsigned long long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CFloat( self, _CFloat cobject ):
    " set self from a CFloat instance"
    (<unsigned long*>self.p)[0] = <unsigned long>(<float*>cobject.p)[0]
  def init_CFloat( self, _CFloat cobject ):
    " set a CFloat instance from self "
    (<float*>cobject.p)[0] = <float>(<unsigned long*>self.p)[0]
  def to_CFloat( self ):
    " cast self to new CFloat instance "
    cdef unsigned long c_src
    cdef float c_tgt
    cdef _CULong py_src
    cdef _CFloat py_tgt
    c_src = (<unsigned long*>self.p)[0]
    c_tgt = <float>c_src
    py_tgt = CFloat()
    (<float*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CDouble( self, _CDouble cobject ):
    " set self from a CDouble instance"
    (<unsigned long*>self.p)[0] = <unsigned long>(<double*>cobject.p)[0]
  def init_CDouble( self, _CDouble cobject ):
    " set a CDouble instance from self "
    (<double*>cobject.p)[0] = <double>(<unsigned long*>self.p)[0]
  def to_CDouble( self ):
    " cast self to new CDouble instance "
    cdef unsigned long c_src
    cdef double c_tgt
    cdef _CULong py_src
    cdef _CDouble py_tgt
    c_src = (<unsigned long*>self.p)[0]
    c_tgt = <double>c_src
    py_tgt = CDouble()
    (<double*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLDouble( self, _CLDouble cobject ):
    " set self from a CLDouble instance"
    (<unsigned long*>self.p)[0] = <unsigned long>(<long double*>cobject.p)[0]
  def init_CLDouble( self, _CLDouble cobject ):
    " set a CLDouble instance from self "
    (<long double*>cobject.p)[0] = <long double>(<unsigned long*>self.p)[0]
  def to_CLDouble( self ):
    " cast self to new CLDouble instance "
    cdef unsigned long c_src
    cdef long double c_tgt
    cdef _CULong py_src
    cdef _CLDouble py_tgt
    c_src = (<unsigned long*>self.p)[0]
    c_tgt = <long double>c_src
    py_tgt = CLDouble()
    (<long double*>py_tgt.p)[0] = c_tgt
    return py_tgt
CULong = Meta('CULong', (_CULong,), {} )
CULong.basetype = CULong
CULong.sizeof = sizeof(unsigned long)

#cdef public class _CLLong(_CObject)[ object AdaptObj_CLLong, type AdaptType_CLLong ]:
cdef class _CLLong(_CObject):
  def __init__( self, value = None, addr = None ):
    cdef long long*p
    cdef long c_addr
    cdef _CObject cobject
    if addr is None:
      p = <long long*>pyx_calloc(1,sizeof(long long))
      self.p = <void*>p
      if isinstance(value,CObject):
        if isinstance(value,_CLLong):
          cobject = value
          p[0] = (<long long*>cobject.p)[0]
        else:
          value.init_CLLong(self)
      elif value is not None:
        p[0] = value
      else:
        p[0] = 0
      self.malloced = True
    else:
      c_addr = addr
      self.p = <void*>c_addr
      self.malloced = False
  def __int__( self ):
    cdef long long *p
    assert self.p != NULL
    p = <long long*>self.p
    return int(p[0])
  def __float__( self ):
    cdef long long *p
    assert self.p != NULL
    p = <long long*>self.p
    return float(p[0])
  def __add__( x, y ):
    cdef long long val
    cdef _CLLong self
    if not isinstance(x,CLLong):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<long long*>self.p)[0]
    val = val + y
    return CLLong(val)
  def __sub__( x, y ):
    cdef long long val
    cdef _CLLong self
    if not isinstance(x,CLLong):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<long long*>self.p)[0]
    val = val - y
    return CLLong(val)
  def __mul__( x, y ):
    cdef long long val
    cdef _CLLong self
    if not isinstance(x,CLLong):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<long long*>self.p)[0]
    val = val + y
    return CLLong(val)
  def __repr__( self ):
    cdef long c_addr
    cdef long long c_val
    c_addr = <long>self.p
    value = ""
    if c_addr != 0:
      c_val = (<long long*>self.p)[0]
      value = ", value = %s" % str( c_val )
    return "%s( addr = %s%s )" % (self.__class__.__name__, hex(c_addr), value)
  def set_value( self, value ):
    if isinstance(value,CObject):
      value.init_CLLong(self)
    else:
      (<long long*>self.p)[0] = value
  def get_value( self ):
    return (<long long*>self.p)[0]
  def to_CLLong(self):
    return self
  def init_from( self, _CLLong cobject ):
    " init self from a CLLong instance "
#    if not self.is_compatible(cobject):
    if not isinstance( cobject, CLLong ):
      raise TypeError("%s cannot be set from %s" % (self.__class__, cobject))
    (<long long*>self.p)[0] = (<long long*>cobject.p)[0]
  def get_basetype( self ):
    return CLLong
#  def sizeof( self ):
#    return sizeof(long long)
#  def is_compatible( self, _CObject cobject ):
#    return isinstance( cobject, CLLong )
  def __str__( self ):
    cdef long c_addr
    cdef long long c_val
    c_addr = <long>self.p
    value = ""
    if c_addr != 0:
      c_val = (<long long*>self.p)[0]
      value = str( c_val )
    return value
  def from_CChar( self, _CChar cobject ):
    " set self from a CChar instance"
    (<long long*>self.p)[0] = <long long>(<char*>cobject.p)[0]
  def init_CChar( self, _CChar cobject ):
    " set a CChar instance from self "
    (<char*>cobject.p)[0] = <char>(<long long*>self.p)[0]
  def to_CChar( self ):
    " cast self to new CChar instance "
    cdef long long c_src
    cdef char c_tgt
    cdef _CLLong py_src
    cdef _CChar py_tgt
    c_src = (<long long*>self.p)[0]
    c_tgt = <char>c_src
    py_tgt = CChar()
    (<char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CSChar( self, _CSChar cobject ):
    " set self from a CSChar instance"
    (<long long*>self.p)[0] = <long long>(<signed char*>cobject.p)[0]
  def init_CSChar( self, _CSChar cobject ):
    " set a CSChar instance from self "
    (<signed char*>cobject.p)[0] = <signed char>(<long long*>self.p)[0]
  def to_CSChar( self ):
    " cast self to new CSChar instance "
    cdef long long c_src
    cdef signed char c_tgt
    cdef _CLLong py_src
    cdef _CSChar py_tgt
    c_src = (<long long*>self.p)[0]
    c_tgt = <signed char>c_src
    py_tgt = CSChar()
    (<signed char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUChar( self, _CUChar cobject ):
    " set self from a CUChar instance"
    (<long long*>self.p)[0] = <long long>(<unsigned char*>cobject.p)[0]
  def init_CUChar( self, _CUChar cobject ):
    " set a CUChar instance from self "
    (<unsigned char*>cobject.p)[0] = <unsigned char>(<long long*>self.p)[0]
  def to_CUChar( self ):
    " cast self to new CUChar instance "
    cdef long long c_src
    cdef unsigned char c_tgt
    cdef _CLLong py_src
    cdef _CUChar py_tgt
    c_src = (<long long*>self.p)[0]
    c_tgt = <unsigned char>c_src
    py_tgt = CUChar()
    (<unsigned char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CShort( self, _CShort cobject ):
    " set self from a CShort instance"
    (<long long*>self.p)[0] = <long long>(<short*>cobject.p)[0]
  def init_CShort( self, _CShort cobject ):
    " set a CShort instance from self "
    (<short*>cobject.p)[0] = <short>(<long long*>self.p)[0]
  def to_CShort( self ):
    " cast self to new CShort instance "
    cdef long long c_src
    cdef short c_tgt
    cdef _CLLong py_src
    cdef _CShort py_tgt
    c_src = (<long long*>self.p)[0]
    c_tgt = <short>c_src
    py_tgt = CShort()
    (<short*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUShort( self, _CUShort cobject ):
    " set self from a CUShort instance"
    (<long long*>self.p)[0] = <long long>(<unsigned short*>cobject.p)[0]
  def init_CUShort( self, _CUShort cobject ):
    " set a CUShort instance from self "
    (<unsigned short*>cobject.p)[0] = <unsigned short>(<long long*>self.p)[0]
  def to_CUShort( self ):
    " cast self to new CUShort instance "
    cdef long long c_src
    cdef unsigned short c_tgt
    cdef _CLLong py_src
    cdef _CUShort py_tgt
    c_src = (<long long*>self.p)[0]
    c_tgt = <unsigned short>c_src
    py_tgt = CUShort()
    (<unsigned short*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CInt( self, _CInt cobject ):
    " set self from a CInt instance"
    (<long long*>self.p)[0] = <long long>(<int*>cobject.p)[0]
  def init_CInt( self, _CInt cobject ):
    " set a CInt instance from self "
    (<int*>cobject.p)[0] = <int>(<long long*>self.p)[0]
  def to_CInt( self ):
    " cast self to new CInt instance "
    cdef long long c_src
    cdef int c_tgt
    cdef _CLLong py_src
    cdef _CInt py_tgt
    c_src = (<long long*>self.p)[0]
    c_tgt = <int>c_src
    py_tgt = CInt()
    (<int*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUInt( self, _CUInt cobject ):
    " set self from a CUInt instance"
    (<long long*>self.p)[0] = <long long>(<unsigned int*>cobject.p)[0]
  def init_CUInt( self, _CUInt cobject ):
    " set a CUInt instance from self "
    (<unsigned int*>cobject.p)[0] = <unsigned int>(<long long*>self.p)[0]
  def to_CUInt( self ):
    " cast self to new CUInt instance "
    cdef long long c_src
    cdef unsigned int c_tgt
    cdef _CLLong py_src
    cdef _CUInt py_tgt
    c_src = (<long long*>self.p)[0]
    c_tgt = <unsigned int>c_src
    py_tgt = CUInt()
    (<unsigned int*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLong( self, _CLong cobject ):
    " set self from a CLong instance"
    (<long long*>self.p)[0] = <long long>(<long*>cobject.p)[0]
  def init_CLong( self, _CLong cobject ):
    " set a CLong instance from self "
    (<long*>cobject.p)[0] = <long>(<long long*>self.p)[0]
  def to_CLong( self ):
    " cast self to new CLong instance "
    cdef long long c_src
    cdef long c_tgt
    cdef _CLLong py_src
    cdef _CLong py_tgt
    c_src = (<long long*>self.p)[0]
    c_tgt = <long>c_src
    py_tgt = CLong()
    (<long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CULong( self, _CULong cobject ):
    " set self from a CULong instance"
    (<long long*>self.p)[0] = <long long>(<unsigned long*>cobject.p)[0]
  def init_CULong( self, _CULong cobject ):
    " set a CULong instance from self "
    (<unsigned long*>cobject.p)[0] = <unsigned long>(<long long*>self.p)[0]
  def to_CULong( self ):
    " cast self to new CULong instance "
    cdef long long c_src
    cdef unsigned long c_tgt
    cdef _CLLong py_src
    cdef _CULong py_tgt
    c_src = (<long long*>self.p)[0]
    c_tgt = <unsigned long>c_src
    py_tgt = CULong()
    (<unsigned long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLLong( self, _CLLong cobject ):
    " set self from a CLLong instance"
    (<long long*>self.p)[0] = <long long>(<long long*>cobject.p)[0]
  def init_CLLong( self, _CLLong cobject ):
    " set a CLLong instance from self "
    (<long long*>cobject.p)[0] = <long long>(<long long*>self.p)[0]
  def from_CULLong( self, _CULLong cobject ):
    " set self from a CULLong instance"
    (<long long*>self.p)[0] = <long long>(<unsigned long long*>cobject.p)[0]
  def init_CULLong( self, _CULLong cobject ):
    " set a CULLong instance from self "
    (<unsigned long long*>cobject.p)[0] = <unsigned long long>(<long long*>self.p)[0]
  def to_CULLong( self ):
    " cast self to new CULLong instance "
    cdef long long c_src
    cdef unsigned long long c_tgt
    cdef _CLLong py_src
    cdef _CULLong py_tgt
    c_src = (<long long*>self.p)[0]
    c_tgt = <unsigned long long>c_src
    py_tgt = CULLong()
    (<unsigned long long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CFloat( self, _CFloat cobject ):
    " set self from a CFloat instance"
    (<long long*>self.p)[0] = <long long>(<float*>cobject.p)[0]
  def init_CFloat( self, _CFloat cobject ):
    " set a CFloat instance from self "
    (<float*>cobject.p)[0] = <float>(<long long*>self.p)[0]
  def to_CFloat( self ):
    " cast self to new CFloat instance "
    cdef long long c_src
    cdef float c_tgt
    cdef _CLLong py_src
    cdef _CFloat py_tgt
    c_src = (<long long*>self.p)[0]
    c_tgt = <float>c_src
    py_tgt = CFloat()
    (<float*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CDouble( self, _CDouble cobject ):
    " set self from a CDouble instance"
    (<long long*>self.p)[0] = <long long>(<double*>cobject.p)[0]
  def init_CDouble( self, _CDouble cobject ):
    " set a CDouble instance from self "
    (<double*>cobject.p)[0] = <double>(<long long*>self.p)[0]
  def to_CDouble( self ):
    " cast self to new CDouble instance "
    cdef long long c_src
    cdef double c_tgt
    cdef _CLLong py_src
    cdef _CDouble py_tgt
    c_src = (<long long*>self.p)[0]
    c_tgt = <double>c_src
    py_tgt = CDouble()
    (<double*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLDouble( self, _CLDouble cobject ):
    " set self from a CLDouble instance"
    (<long long*>self.p)[0] = <long long>(<long double*>cobject.p)[0]
  def init_CLDouble( self, _CLDouble cobject ):
    " set a CLDouble instance from self "
    (<long double*>cobject.p)[0] = <long double>(<long long*>self.p)[0]
  def to_CLDouble( self ):
    " cast self to new CLDouble instance "
    cdef long long c_src
    cdef long double c_tgt
    cdef _CLLong py_src
    cdef _CLDouble py_tgt
    c_src = (<long long*>self.p)[0]
    c_tgt = <long double>c_src
    py_tgt = CLDouble()
    (<long double*>py_tgt.p)[0] = c_tgt
    return py_tgt
CLLong = Meta('CLLong', (_CLLong,), {} )
CLLong.basetype = CLLong
CLLong.sizeof = sizeof(long long)

#cdef public class _CULLong(_CObject)[ object AdaptObj_CULLong, type AdaptType_CULLong ]:
cdef class _CULLong(_CObject):
  def __init__( self, value = None, addr = None ):
    cdef unsigned long long*p
    cdef long c_addr
    cdef _CObject cobject
    if addr is None:
      p = <unsigned long long*>pyx_calloc(1,sizeof(unsigned long long))
      self.p = <void*>p
      if isinstance(value,CObject):
        if isinstance(value,_CULLong):
          cobject = value
          p[0] = (<unsigned long long*>cobject.p)[0]
        else:
          value.init_CULLong(self)
      elif value is not None:
        p[0] = value
      else:
        p[0] = 0
      self.malloced = True
    else:
      c_addr = addr
      self.p = <void*>c_addr
      self.malloced = False
  def __int__( self ):
    cdef unsigned long long *p
    assert self.p != NULL
    p = <unsigned long long*>self.p
    return int(p[0])
  def __float__( self ):
    cdef unsigned long long *p
    assert self.p != NULL
    p = <unsigned long long*>self.p
    return float(p[0])
  def __add__( x, y ):
    cdef unsigned long long val
    cdef _CULLong self
    if not isinstance(x,CULLong):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<unsigned long long*>self.p)[0]
    val = val + y
    return CULLong(val)
  def __sub__( x, y ):
    cdef unsigned long long val
    cdef _CULLong self
    if not isinstance(x,CULLong):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<unsigned long long*>self.p)[0]
    val = val - y
    return CULLong(val)
  def __mul__( x, y ):
    cdef unsigned long long val
    cdef _CULLong self
    if not isinstance(x,CULLong):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<unsigned long long*>self.p)[0]
    val = val + y
    return CULLong(val)
  def __repr__( self ):
    cdef long c_addr
    cdef unsigned long long c_val
    c_addr = <long>self.p
    value = ""
    if c_addr != 0:
      c_val = (<unsigned long long*>self.p)[0]
      value = ", value = %s" % str( c_val )
    return "%s( addr = %s%s )" % (self.__class__.__name__, hex(c_addr), value)
  def set_value( self, value ):
    if isinstance(value,CObject):
      value.init_CULLong(self)
    else:
      (<unsigned long long*>self.p)[0] = value
  def get_value( self ):
    return (<unsigned long long*>self.p)[0]
  def to_CULLong(self):
    return self
  def init_from( self, _CULLong cobject ):
    " init self from a CULLong instance "
#    if not self.is_compatible(cobject):
    if not isinstance( cobject, CULLong ):
      raise TypeError("%s cannot be set from %s" % (self.__class__, cobject))
    (<unsigned long long*>self.p)[0] = (<unsigned long long*>cobject.p)[0]
  def get_basetype( self ):
    return CULLong
#  def sizeof( self ):
#    return sizeof(unsigned long long)
#  def is_compatible( self, _CObject cobject ):
#    return isinstance( cobject, CULLong )
  def __str__( self ):
    cdef long c_addr
    cdef unsigned long long c_val
    c_addr = <long>self.p
    value = ""
    if c_addr != 0:
      c_val = (<unsigned long long*>self.p)[0]
      value = str( c_val )
    return value
  def from_CChar( self, _CChar cobject ):
    " set self from a CChar instance"
    (<unsigned long long*>self.p)[0] = <unsigned long long>(<char*>cobject.p)[0]
  def init_CChar( self, _CChar cobject ):
    " set a CChar instance from self "
    (<char*>cobject.p)[0] = <char>(<unsigned long long*>self.p)[0]
  def to_CChar( self ):
    " cast self to new CChar instance "
    cdef unsigned long long c_src
    cdef char c_tgt
    cdef _CULLong py_src
    cdef _CChar py_tgt
    c_src = (<unsigned long long*>self.p)[0]
    c_tgt = <char>c_src
    py_tgt = CChar()
    (<char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CSChar( self, _CSChar cobject ):
    " set self from a CSChar instance"
    (<unsigned long long*>self.p)[0] = <unsigned long long>(<signed char*>cobject.p)[0]
  def init_CSChar( self, _CSChar cobject ):
    " set a CSChar instance from self "
    (<signed char*>cobject.p)[0] = <signed char>(<unsigned long long*>self.p)[0]
  def to_CSChar( self ):
    " cast self to new CSChar instance "
    cdef unsigned long long c_src
    cdef signed char c_tgt
    cdef _CULLong py_src
    cdef _CSChar py_tgt
    c_src = (<unsigned long long*>self.p)[0]
    c_tgt = <signed char>c_src
    py_tgt = CSChar()
    (<signed char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUChar( self, _CUChar cobject ):
    " set self from a CUChar instance"
    (<unsigned long long*>self.p)[0] = <unsigned long long>(<unsigned char*>cobject.p)[0]
  def init_CUChar( self, _CUChar cobject ):
    " set a CUChar instance from self "
    (<unsigned char*>cobject.p)[0] = <unsigned char>(<unsigned long long*>self.p)[0]
  def to_CUChar( self ):
    " cast self to new CUChar instance "
    cdef unsigned long long c_src
    cdef unsigned char c_tgt
    cdef _CULLong py_src
    cdef _CUChar py_tgt
    c_src = (<unsigned long long*>self.p)[0]
    c_tgt = <unsigned char>c_src
    py_tgt = CUChar()
    (<unsigned char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CShort( self, _CShort cobject ):
    " set self from a CShort instance"
    (<unsigned long long*>self.p)[0] = <unsigned long long>(<short*>cobject.p)[0]
  def init_CShort( self, _CShort cobject ):
    " set a CShort instance from self "
    (<short*>cobject.p)[0] = <short>(<unsigned long long*>self.p)[0]
  def to_CShort( self ):
    " cast self to new CShort instance "
    cdef unsigned long long c_src
    cdef short c_tgt
    cdef _CULLong py_src
    cdef _CShort py_tgt
    c_src = (<unsigned long long*>self.p)[0]
    c_tgt = <short>c_src
    py_tgt = CShort()
    (<short*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUShort( self, _CUShort cobject ):
    " set self from a CUShort instance"
    (<unsigned long long*>self.p)[0] = <unsigned long long>(<unsigned short*>cobject.p)[0]
  def init_CUShort( self, _CUShort cobject ):
    " set a CUShort instance from self "
    (<unsigned short*>cobject.p)[0] = <unsigned short>(<unsigned long long*>self.p)[0]
  def to_CUShort( self ):
    " cast self to new CUShort instance "
    cdef unsigned long long c_src
    cdef unsigned short c_tgt
    cdef _CULLong py_src
    cdef _CUShort py_tgt
    c_src = (<unsigned long long*>self.p)[0]
    c_tgt = <unsigned short>c_src
    py_tgt = CUShort()
    (<unsigned short*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CInt( self, _CInt cobject ):
    " set self from a CInt instance"
    (<unsigned long long*>self.p)[0] = <unsigned long long>(<int*>cobject.p)[0]
  def init_CInt( self, _CInt cobject ):
    " set a CInt instance from self "
    (<int*>cobject.p)[0] = <int>(<unsigned long long*>self.p)[0]
  def to_CInt( self ):
    " cast self to new CInt instance "
    cdef unsigned long long c_src
    cdef int c_tgt
    cdef _CULLong py_src
    cdef _CInt py_tgt
    c_src = (<unsigned long long*>self.p)[0]
    c_tgt = <int>c_src
    py_tgt = CInt()
    (<int*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUInt( self, _CUInt cobject ):
    " set self from a CUInt instance"
    (<unsigned long long*>self.p)[0] = <unsigned long long>(<unsigned int*>cobject.p)[0]
  def init_CUInt( self, _CUInt cobject ):
    " set a CUInt instance from self "
    (<unsigned int*>cobject.p)[0] = <unsigned int>(<unsigned long long*>self.p)[0]
  def to_CUInt( self ):
    " cast self to new CUInt instance "
    cdef unsigned long long c_src
    cdef unsigned int c_tgt
    cdef _CULLong py_src
    cdef _CUInt py_tgt
    c_src = (<unsigned long long*>self.p)[0]
    c_tgt = <unsigned int>c_src
    py_tgt = CUInt()
    (<unsigned int*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLong( self, _CLong cobject ):
    " set self from a CLong instance"
    (<unsigned long long*>self.p)[0] = <unsigned long long>(<long*>cobject.p)[0]
  def init_CLong( self, _CLong cobject ):
    " set a CLong instance from self "
    (<long*>cobject.p)[0] = <long>(<unsigned long long*>self.p)[0]
  def to_CLong( self ):
    " cast self to new CLong instance "
    cdef unsigned long long c_src
    cdef long c_tgt
    cdef _CULLong py_src
    cdef _CLong py_tgt
    c_src = (<unsigned long long*>self.p)[0]
    c_tgt = <long>c_src
    py_tgt = CLong()
    (<long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CULong( self, _CULong cobject ):
    " set self from a CULong instance"
    (<unsigned long long*>self.p)[0] = <unsigned long long>(<unsigned long*>cobject.p)[0]
  def init_CULong( self, _CULong cobject ):
    " set a CULong instance from self "
    (<unsigned long*>cobject.p)[0] = <unsigned long>(<unsigned long long*>self.p)[0]
  def to_CULong( self ):
    " cast self to new CULong instance "
    cdef unsigned long long c_src
    cdef unsigned long c_tgt
    cdef _CULLong py_src
    cdef _CULong py_tgt
    c_src = (<unsigned long long*>self.p)[0]
    c_tgt = <unsigned long>c_src
    py_tgt = CULong()
    (<unsigned long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLLong( self, _CLLong cobject ):
    " set self from a CLLong instance"
    (<unsigned long long*>self.p)[0] = <unsigned long long>(<long long*>cobject.p)[0]
  def init_CLLong( self, _CLLong cobject ):
    " set a CLLong instance from self "
    (<long long*>cobject.p)[0] = <long long>(<unsigned long long*>self.p)[0]
  def to_CLLong( self ):
    " cast self to new CLLong instance "
    cdef unsigned long long c_src
    cdef long long c_tgt
    cdef _CULLong py_src
    cdef _CLLong py_tgt
    c_src = (<unsigned long long*>self.p)[0]
    c_tgt = <long long>c_src
    py_tgt = CLLong()
    (<long long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CULLong( self, _CULLong cobject ):
    " set self from a CULLong instance"
    (<unsigned long long*>self.p)[0] = <unsigned long long>(<unsigned long long*>cobject.p)[0]
  def init_CULLong( self, _CULLong cobject ):
    " set a CULLong instance from self "
    (<unsigned long long*>cobject.p)[0] = <unsigned long long>(<unsigned long long*>self.p)[0]
  def from_CFloat( self, _CFloat cobject ):
    " set self from a CFloat instance"
    (<unsigned long long*>self.p)[0] = <unsigned long long>(<float*>cobject.p)[0]
  def init_CFloat( self, _CFloat cobject ):
    " set a CFloat instance from self "
    (<float*>cobject.p)[0] = <float>(<unsigned long long*>self.p)[0]
  def to_CFloat( self ):
    " cast self to new CFloat instance "
    cdef unsigned long long c_src
    cdef float c_tgt
    cdef _CULLong py_src
    cdef _CFloat py_tgt
    c_src = (<unsigned long long*>self.p)[0]
    c_tgt = <float>c_src
    py_tgt = CFloat()
    (<float*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CDouble( self, _CDouble cobject ):
    " set self from a CDouble instance"
    (<unsigned long long*>self.p)[0] = <unsigned long long>(<double*>cobject.p)[0]
  def init_CDouble( self, _CDouble cobject ):
    " set a CDouble instance from self "
    (<double*>cobject.p)[0] = <double>(<unsigned long long*>self.p)[0]
  def to_CDouble( self ):
    " cast self to new CDouble instance "
    cdef unsigned long long c_src
    cdef double c_tgt
    cdef _CULLong py_src
    cdef _CDouble py_tgt
    c_src = (<unsigned long long*>self.p)[0]
    c_tgt = <double>c_src
    py_tgt = CDouble()
    (<double*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLDouble( self, _CLDouble cobject ):
    " set self from a CLDouble instance"
    (<unsigned long long*>self.p)[0] = <unsigned long long>(<long double*>cobject.p)[0]
  def init_CLDouble( self, _CLDouble cobject ):
    " set a CLDouble instance from self "
    (<long double*>cobject.p)[0] = <long double>(<unsigned long long*>self.p)[0]
  def to_CLDouble( self ):
    " cast self to new CLDouble instance "
    cdef unsigned long long c_src
    cdef long double c_tgt
    cdef _CULLong py_src
    cdef _CLDouble py_tgt
    c_src = (<unsigned long long*>self.p)[0]
    c_tgt = <long double>c_src
    py_tgt = CLDouble()
    (<long double*>py_tgt.p)[0] = c_tgt
    return py_tgt
CULLong = Meta('CULLong', (_CULLong,), {} )
CULLong.basetype = CULLong
CULLong.sizeof = sizeof(unsigned long long)

#cdef public class _CFloat(_CObject)[ object AdaptObj_CFloat, type AdaptType_CFloat ]:
cdef class _CFloat(_CObject):
  def __init__( self, value = None, addr = None ):
    cdef float*p
    cdef long c_addr
    cdef _CObject cobject
    if addr is None:
      p = <float*>pyx_calloc(1,sizeof(float))
      self.p = <void*>p
      if isinstance(value,CObject):
        if isinstance(value,_CFloat):
          cobject = value
          p[0] = (<float*>cobject.p)[0]
        else:
          value.init_CFloat(self)
      elif value is not None:
        p[0] = value
      else:
        p[0] = 0
      self.malloced = True
    else:
      c_addr = addr
      self.p = <void*>c_addr
      self.malloced = False
  def __int__( self ):
    cdef float *p
    assert self.p != NULL
    p = <float*>self.p
    return int(p[0])
  def __float__( self ):
    cdef float *p
    assert self.p != NULL
    p = <float*>self.p
    return float(p[0])
  def __add__( x, y ):
    cdef float val
    cdef _CFloat self
    if not isinstance(x,CFloat):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<float*>self.p)[0]
    val = val + y
    return CFloat(val)
  def __sub__( x, y ):
    cdef float val
    cdef _CFloat self
    if not isinstance(x,CFloat):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<float*>self.p)[0]
    val = val - y
    return CFloat(val)
  def __mul__( x, y ):
    cdef float val
    cdef _CFloat self
    if not isinstance(x,CFloat):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<float*>self.p)[0]
    val = val + y
    return CFloat(val)
  def __repr__( self ):
    cdef long c_addr
    cdef float c_val
    c_addr = <long>self.p
    value = ""
    if c_addr != 0:
      c_val = (<float*>self.p)[0]
      value = ", value = %s" % str( c_val )
    return "%s( addr = %s%s )" % (self.__class__.__name__, hex(c_addr), value)
  def set_value( self, value ):
    if isinstance(value,CObject):
      value.init_CFloat(self)
    else:
      (<float*>self.p)[0] = value
  def get_value( self ):
    return (<float*>self.p)[0]
  def to_CFloat(self):
    return self
  def init_from( self, _CFloat cobject ):
    " init self from a CFloat instance "
#    if not self.is_compatible(cobject):
    if not isinstance( cobject, CFloat ):
      raise TypeError("%s cannot be set from %s" % (self.__class__, cobject))
    (<float*>self.p)[0] = (<float*>cobject.p)[0]
  def get_basetype( self ):
    return CFloat
#  def sizeof( self ):
#    return sizeof(float)
#  def is_compatible( self, _CObject cobject ):
#    return isinstance( cobject, CFloat )
  def __str__( self ):
    cdef long c_addr
    cdef float c_val
    c_addr = <long>self.p
    value = ""
    if c_addr != 0:
      c_val = (<float*>self.p)[0]
      value = str( c_val )
    return value
  def from_CChar( self, _CChar cobject ):
    " set self from a CChar instance"
    (<float*>self.p)[0] = <float>(<char*>cobject.p)[0]
  def init_CChar( self, _CChar cobject ):
    " set a CChar instance from self "
    (<char*>cobject.p)[0] = <char>(<float*>self.p)[0]
  def to_CChar( self ):
    " cast self to new CChar instance "
    cdef float c_src
    cdef char c_tgt
    cdef _CFloat py_src
    cdef _CChar py_tgt
    c_src = (<float*>self.p)[0]
    c_tgt = <char>c_src
    py_tgt = CChar()
    (<char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CSChar( self, _CSChar cobject ):
    " set self from a CSChar instance"
    (<float*>self.p)[0] = <float>(<signed char*>cobject.p)[0]
  def init_CSChar( self, _CSChar cobject ):
    " set a CSChar instance from self "
    (<signed char*>cobject.p)[0] = <signed char>(<float*>self.p)[0]
  def to_CSChar( self ):
    " cast self to new CSChar instance "
    cdef float c_src
    cdef signed char c_tgt
    cdef _CFloat py_src
    cdef _CSChar py_tgt
    c_src = (<float*>self.p)[0]
    c_tgt = <signed char>c_src
    py_tgt = CSChar()
    (<signed char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUChar( self, _CUChar cobject ):
    " set self from a CUChar instance"
    (<float*>self.p)[0] = <float>(<unsigned char*>cobject.p)[0]
  def init_CUChar( self, _CUChar cobject ):
    " set a CUChar instance from self "
    (<unsigned char*>cobject.p)[0] = <unsigned char>(<float*>self.p)[0]
  def to_CUChar( self ):
    " cast self to new CUChar instance "
    cdef float c_src
    cdef unsigned char c_tgt
    cdef _CFloat py_src
    cdef _CUChar py_tgt
    c_src = (<float*>self.p)[0]
    c_tgt = <unsigned char>c_src
    py_tgt = CUChar()
    (<unsigned char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CShort( self, _CShort cobject ):
    " set self from a CShort instance"
    (<float*>self.p)[0] = <float>(<short*>cobject.p)[0]
  def init_CShort( self, _CShort cobject ):
    " set a CShort instance from self "
    (<short*>cobject.p)[0] = <short>(<float*>self.p)[0]
  def to_CShort( self ):
    " cast self to new CShort instance "
    cdef float c_src
    cdef short c_tgt
    cdef _CFloat py_src
    cdef _CShort py_tgt
    c_src = (<float*>self.p)[0]
    c_tgt = <short>c_src
    py_tgt = CShort()
    (<short*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUShort( self, _CUShort cobject ):
    " set self from a CUShort instance"
    (<float*>self.p)[0] = <float>(<unsigned short*>cobject.p)[0]
  def init_CUShort( self, _CUShort cobject ):
    " set a CUShort instance from self "
    (<unsigned short*>cobject.p)[0] = <unsigned short>(<float*>self.p)[0]
  def to_CUShort( self ):
    " cast self to new CUShort instance "
    cdef float c_src
    cdef unsigned short c_tgt
    cdef _CFloat py_src
    cdef _CUShort py_tgt
    c_src = (<float*>self.p)[0]
    c_tgt = <unsigned short>c_src
    py_tgt = CUShort()
    (<unsigned short*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CInt( self, _CInt cobject ):
    " set self from a CInt instance"
    (<float*>self.p)[0] = <float>(<int*>cobject.p)[0]
  def init_CInt( self, _CInt cobject ):
    " set a CInt instance from self "
    (<int*>cobject.p)[0] = <int>(<float*>self.p)[0]
  def to_CInt( self ):
    " cast self to new CInt instance "
    cdef float c_src
    cdef int c_tgt
    cdef _CFloat py_src
    cdef _CInt py_tgt
    c_src = (<float*>self.p)[0]
    c_tgt = <int>c_src
    py_tgt = CInt()
    (<int*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUInt( self, _CUInt cobject ):
    " set self from a CUInt instance"
    (<float*>self.p)[0] = <float>(<unsigned int*>cobject.p)[0]
  def init_CUInt( self, _CUInt cobject ):
    " set a CUInt instance from self "
    (<unsigned int*>cobject.p)[0] = <unsigned int>(<float*>self.p)[0]
  def to_CUInt( self ):
    " cast self to new CUInt instance "
    cdef float c_src
    cdef unsigned int c_tgt
    cdef _CFloat py_src
    cdef _CUInt py_tgt
    c_src = (<float*>self.p)[0]
    c_tgt = <unsigned int>c_src
    py_tgt = CUInt()
    (<unsigned int*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLong( self, _CLong cobject ):
    " set self from a CLong instance"
    (<float*>self.p)[0] = <float>(<long*>cobject.p)[0]
  def init_CLong( self, _CLong cobject ):
    " set a CLong instance from self "
    (<long*>cobject.p)[0] = <long>(<float*>self.p)[0]
  def to_CLong( self ):
    " cast self to new CLong instance "
    cdef float c_src
    cdef long c_tgt
    cdef _CFloat py_src
    cdef _CLong py_tgt
    c_src = (<float*>self.p)[0]
    c_tgt = <long>c_src
    py_tgt = CLong()
    (<long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CULong( self, _CULong cobject ):
    " set self from a CULong instance"
    (<float*>self.p)[0] = <float>(<unsigned long*>cobject.p)[0]
  def init_CULong( self, _CULong cobject ):
    " set a CULong instance from self "
    (<unsigned long*>cobject.p)[0] = <unsigned long>(<float*>self.p)[0]
  def to_CULong( self ):
    " cast self to new CULong instance "
    cdef float c_src
    cdef unsigned long c_tgt
    cdef _CFloat py_src
    cdef _CULong py_tgt
    c_src = (<float*>self.p)[0]
    c_tgt = <unsigned long>c_src
    py_tgt = CULong()
    (<unsigned long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLLong( self, _CLLong cobject ):
    " set self from a CLLong instance"
    (<float*>self.p)[0] = <float>(<long long*>cobject.p)[0]
  def init_CLLong( self, _CLLong cobject ):
    " set a CLLong instance from self "
    (<long long*>cobject.p)[0] = <long long>(<float*>self.p)[0]
  def to_CLLong( self ):
    " cast self to new CLLong instance "
    cdef float c_src
    cdef long long c_tgt
    cdef _CFloat py_src
    cdef _CLLong py_tgt
    c_src = (<float*>self.p)[0]
    c_tgt = <long long>c_src
    py_tgt = CLLong()
    (<long long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CULLong( self, _CULLong cobject ):
    " set self from a CULLong instance"
    (<float*>self.p)[0] = <float>(<unsigned long long*>cobject.p)[0]
  def init_CULLong( self, _CULLong cobject ):
    " set a CULLong instance from self "
    (<unsigned long long*>cobject.p)[0] = <unsigned long long>(<float*>self.p)[0]
  def to_CULLong( self ):
    " cast self to new CULLong instance "
    cdef float c_src
    cdef unsigned long long c_tgt
    cdef _CFloat py_src
    cdef _CULLong py_tgt
    c_src = (<float*>self.p)[0]
    c_tgt = <unsigned long long>c_src
    py_tgt = CULLong()
    (<unsigned long long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CFloat( self, _CFloat cobject ):
    " set self from a CFloat instance"
    (<float*>self.p)[0] = <float>(<float*>cobject.p)[0]
  def init_CFloat( self, _CFloat cobject ):
    " set a CFloat instance from self "
    (<float*>cobject.p)[0] = <float>(<float*>self.p)[0]
  def from_CDouble( self, _CDouble cobject ):
    " set self from a CDouble instance"
    (<float*>self.p)[0] = <float>(<double*>cobject.p)[0]
  def init_CDouble( self, _CDouble cobject ):
    " set a CDouble instance from self "
    (<double*>cobject.p)[0] = <double>(<float*>self.p)[0]
  def to_CDouble( self ):
    " cast self to new CDouble instance "
    cdef float c_src
    cdef double c_tgt
    cdef _CFloat py_src
    cdef _CDouble py_tgt
    c_src = (<float*>self.p)[0]
    c_tgt = <double>c_src
    py_tgt = CDouble()
    (<double*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLDouble( self, _CLDouble cobject ):
    " set self from a CLDouble instance"
    (<float*>self.p)[0] = <float>(<long double*>cobject.p)[0]
  def init_CLDouble( self, _CLDouble cobject ):
    " set a CLDouble instance from self "
    (<long double*>cobject.p)[0] = <long double>(<float*>self.p)[0]
  def to_CLDouble( self ):
    " cast self to new CLDouble instance "
    cdef float c_src
    cdef long double c_tgt
    cdef _CFloat py_src
    cdef _CLDouble py_tgt
    c_src = (<float*>self.p)[0]
    c_tgt = <long double>c_src
    py_tgt = CLDouble()
    (<long double*>py_tgt.p)[0] = c_tgt
    return py_tgt
CFloat = Meta('CFloat', (_CFloat,), {} )
CFloat.basetype = CFloat
CFloat.sizeof = sizeof(float)

#cdef public class _CDouble(_CObject)[ object AdaptObj_CDouble, type AdaptType_CDouble ]:
cdef class _CDouble(_CObject):
  def __init__( self, value = None, addr = None ):
    cdef double*p
    cdef long c_addr
    cdef _CObject cobject
    if addr is None:
      p = <double*>pyx_calloc(1,sizeof(double))
      self.p = <void*>p
      if isinstance(value,CObject):
        if isinstance(value,_CDouble):
          cobject = value
          p[0] = (<double*>cobject.p)[0]
        else:
          value.init_CDouble(self)
      elif value is not None:
        p[0] = value
      else:
        p[0] = 0
      self.malloced = True
    else:
      c_addr = addr
      self.p = <void*>c_addr
      self.malloced = False
  def __int__( self ):
    cdef double *p
    assert self.p != NULL
    p = <double*>self.p
    return int(p[0])
  def __float__( self ):
    cdef double *p
    assert self.p != NULL
    p = <double*>self.p
    return float(p[0])
  def __add__( x, y ):
    cdef double val
    cdef _CDouble self
    if not isinstance(x,CDouble):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<double*>self.p)[0]
    val = val + y
    return CDouble(val)
  def __sub__( x, y ):
    cdef double val
    cdef _CDouble self
    if not isinstance(x,CDouble):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<double*>self.p)[0]
    val = val - y
    return CDouble(val)
  def __mul__( x, y ):
    cdef double val
    cdef _CDouble self
    if not isinstance(x,CDouble):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<double*>self.p)[0]
    val = val + y
    return CDouble(val)
  def __repr__( self ):
    cdef long c_addr
    cdef double c_val
    c_addr = <long>self.p
    value = ""
    if c_addr != 0:
      c_val = (<double*>self.p)[0]
      value = ", value = %s" % str( c_val )
    return "%s( addr = %s%s )" % (self.__class__.__name__, hex(c_addr), value)
  def set_value( self, value ):
    if isinstance(value,CObject):
      value.init_CDouble(self)
    else:
      (<double*>self.p)[0] = value
  def get_value( self ):
    return (<double*>self.p)[0]
  def to_CDouble(self):
    return self
  def init_from( self, _CDouble cobject ):
    " init self from a CDouble instance "
#    if not self.is_compatible(cobject):
    if not isinstance( cobject, CDouble ):
      raise TypeError("%s cannot be set from %s" % (self.__class__, cobject))
    (<double*>self.p)[0] = (<double*>cobject.p)[0]
  def get_basetype( self ):
    return CDouble
#  def sizeof( self ):
#    return sizeof(double)
#  def is_compatible( self, _CObject cobject ):
#    return isinstance( cobject, CDouble )
  def __str__( self ):
    cdef long c_addr
    cdef double c_val
    c_addr = <long>self.p
    value = ""
    if c_addr != 0:
      c_val = (<double*>self.p)[0]
      value = str( c_val )
    return value
  def from_CChar( self, _CChar cobject ):
    " set self from a CChar instance"
    (<double*>self.p)[0] = <double>(<char*>cobject.p)[0]
  def init_CChar( self, _CChar cobject ):
    " set a CChar instance from self "
    (<char*>cobject.p)[0] = <char>(<double*>self.p)[0]
  def to_CChar( self ):
    " cast self to new CChar instance "
    cdef double c_src
    cdef char c_tgt
    cdef _CDouble py_src
    cdef _CChar py_tgt
    c_src = (<double*>self.p)[0]
    c_tgt = <char>c_src
    py_tgt = CChar()
    (<char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CSChar( self, _CSChar cobject ):
    " set self from a CSChar instance"
    (<double*>self.p)[0] = <double>(<signed char*>cobject.p)[0]
  def init_CSChar( self, _CSChar cobject ):
    " set a CSChar instance from self "
    (<signed char*>cobject.p)[0] = <signed char>(<double*>self.p)[0]
  def to_CSChar( self ):
    " cast self to new CSChar instance "
    cdef double c_src
    cdef signed char c_tgt
    cdef _CDouble py_src
    cdef _CSChar py_tgt
    c_src = (<double*>self.p)[0]
    c_tgt = <signed char>c_src
    py_tgt = CSChar()
    (<signed char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUChar( self, _CUChar cobject ):
    " set self from a CUChar instance"
    (<double*>self.p)[0] = <double>(<unsigned char*>cobject.p)[0]
  def init_CUChar( self, _CUChar cobject ):
    " set a CUChar instance from self "
    (<unsigned char*>cobject.p)[0] = <unsigned char>(<double*>self.p)[0]
  def to_CUChar( self ):
    " cast self to new CUChar instance "
    cdef double c_src
    cdef unsigned char c_tgt
    cdef _CDouble py_src
    cdef _CUChar py_tgt
    c_src = (<double*>self.p)[0]
    c_tgt = <unsigned char>c_src
    py_tgt = CUChar()
    (<unsigned char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CShort( self, _CShort cobject ):
    " set self from a CShort instance"
    (<double*>self.p)[0] = <double>(<short*>cobject.p)[0]
  def init_CShort( self, _CShort cobject ):
    " set a CShort instance from self "
    (<short*>cobject.p)[0] = <short>(<double*>self.p)[0]
  def to_CShort( self ):
    " cast self to new CShort instance "
    cdef double c_src
    cdef short c_tgt
    cdef _CDouble py_src
    cdef _CShort py_tgt
    c_src = (<double*>self.p)[0]
    c_tgt = <short>c_src
    py_tgt = CShort()
    (<short*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUShort( self, _CUShort cobject ):
    " set self from a CUShort instance"
    (<double*>self.p)[0] = <double>(<unsigned short*>cobject.p)[0]
  def init_CUShort( self, _CUShort cobject ):
    " set a CUShort instance from self "
    (<unsigned short*>cobject.p)[0] = <unsigned short>(<double*>self.p)[0]
  def to_CUShort( self ):
    " cast self to new CUShort instance "
    cdef double c_src
    cdef unsigned short c_tgt
    cdef _CDouble py_src
    cdef _CUShort py_tgt
    c_src = (<double*>self.p)[0]
    c_tgt = <unsigned short>c_src
    py_tgt = CUShort()
    (<unsigned short*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CInt( self, _CInt cobject ):
    " set self from a CInt instance"
    (<double*>self.p)[0] = <double>(<int*>cobject.p)[0]
  def init_CInt( self, _CInt cobject ):
    " set a CInt instance from self "
    (<int*>cobject.p)[0] = <int>(<double*>self.p)[0]
  def to_CInt( self ):
    " cast self to new CInt instance "
    cdef double c_src
    cdef int c_tgt
    cdef _CDouble py_src
    cdef _CInt py_tgt
    c_src = (<double*>self.p)[0]
    c_tgt = <int>c_src
    py_tgt = CInt()
    (<int*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUInt( self, _CUInt cobject ):
    " set self from a CUInt instance"
    (<double*>self.p)[0] = <double>(<unsigned int*>cobject.p)[0]
  def init_CUInt( self, _CUInt cobject ):
    " set a CUInt instance from self "
    (<unsigned int*>cobject.p)[0] = <unsigned int>(<double*>self.p)[0]
  def to_CUInt( self ):
    " cast self to new CUInt instance "
    cdef double c_src
    cdef unsigned int c_tgt
    cdef _CDouble py_src
    cdef _CUInt py_tgt
    c_src = (<double*>self.p)[0]
    c_tgt = <unsigned int>c_src
    py_tgt = CUInt()
    (<unsigned int*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLong( self, _CLong cobject ):
    " set self from a CLong instance"
    (<double*>self.p)[0] = <double>(<long*>cobject.p)[0]
  def init_CLong( self, _CLong cobject ):
    " set a CLong instance from self "
    (<long*>cobject.p)[0] = <long>(<double*>self.p)[0]
  def to_CLong( self ):
    " cast self to new CLong instance "
    cdef double c_src
    cdef long c_tgt
    cdef _CDouble py_src
    cdef _CLong py_tgt
    c_src = (<double*>self.p)[0]
    c_tgt = <long>c_src
    py_tgt = CLong()
    (<long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CULong( self, _CULong cobject ):
    " set self from a CULong instance"
    (<double*>self.p)[0] = <double>(<unsigned long*>cobject.p)[0]
  def init_CULong( self, _CULong cobject ):
    " set a CULong instance from self "
    (<unsigned long*>cobject.p)[0] = <unsigned long>(<double*>self.p)[0]
  def to_CULong( self ):
    " cast self to new CULong instance "
    cdef double c_src
    cdef unsigned long c_tgt
    cdef _CDouble py_src
    cdef _CULong py_tgt
    c_src = (<double*>self.p)[0]
    c_tgt = <unsigned long>c_src
    py_tgt = CULong()
    (<unsigned long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLLong( self, _CLLong cobject ):
    " set self from a CLLong instance"
    (<double*>self.p)[0] = <double>(<long long*>cobject.p)[0]
  def init_CLLong( self, _CLLong cobject ):
    " set a CLLong instance from self "
    (<long long*>cobject.p)[0] = <long long>(<double*>self.p)[0]
  def to_CLLong( self ):
    " cast self to new CLLong instance "
    cdef double c_src
    cdef long long c_tgt
    cdef _CDouble py_src
    cdef _CLLong py_tgt
    c_src = (<double*>self.p)[0]
    c_tgt = <long long>c_src
    py_tgt = CLLong()
    (<long long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CULLong( self, _CULLong cobject ):
    " set self from a CULLong instance"
    (<double*>self.p)[0] = <double>(<unsigned long long*>cobject.p)[0]
  def init_CULLong( self, _CULLong cobject ):
    " set a CULLong instance from self "
    (<unsigned long long*>cobject.p)[0] = <unsigned long long>(<double*>self.p)[0]
  def to_CULLong( self ):
    " cast self to new CULLong instance "
    cdef double c_src
    cdef unsigned long long c_tgt
    cdef _CDouble py_src
    cdef _CULLong py_tgt
    c_src = (<double*>self.p)[0]
    c_tgt = <unsigned long long>c_src
    py_tgt = CULLong()
    (<unsigned long long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CFloat( self, _CFloat cobject ):
    " set self from a CFloat instance"
    (<double*>self.p)[0] = <double>(<float*>cobject.p)[0]
  def init_CFloat( self, _CFloat cobject ):
    " set a CFloat instance from self "
    (<float*>cobject.p)[0] = <float>(<double*>self.p)[0]
  def to_CFloat( self ):
    " cast self to new CFloat instance "
    cdef double c_src
    cdef float c_tgt
    cdef _CDouble py_src
    cdef _CFloat py_tgt
    c_src = (<double*>self.p)[0]
    c_tgt = <float>c_src
    py_tgt = CFloat()
    (<float*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CDouble( self, _CDouble cobject ):
    " set self from a CDouble instance"
    (<double*>self.p)[0] = <double>(<double*>cobject.p)[0]
  def init_CDouble( self, _CDouble cobject ):
    " set a CDouble instance from self "
    (<double*>cobject.p)[0] = <double>(<double*>self.p)[0]
  def from_CLDouble( self, _CLDouble cobject ):
    " set self from a CLDouble instance"
    (<double*>self.p)[0] = <double>(<long double*>cobject.p)[0]
  def init_CLDouble( self, _CLDouble cobject ):
    " set a CLDouble instance from self "
    (<long double*>cobject.p)[0] = <long double>(<double*>self.p)[0]
  def to_CLDouble( self ):
    " cast self to new CLDouble instance "
    cdef double c_src
    cdef long double c_tgt
    cdef _CDouble py_src
    cdef _CLDouble py_tgt
    c_src = (<double*>self.p)[0]
    c_tgt = <long double>c_src
    py_tgt = CLDouble()
    (<long double*>py_tgt.p)[0] = c_tgt
    return py_tgt
CDouble = Meta('CDouble', (_CDouble,), {} )
CDouble.basetype = CDouble
CDouble.sizeof = sizeof(double)

#cdef public class _CLDouble(_CObject)[ object AdaptObj_CLDouble, type AdaptType_CLDouble ]:
cdef class _CLDouble(_CObject):
  def __init__( self, value = None, addr = None ):
    cdef long double*p
    cdef long c_addr
    cdef _CObject cobject
    if addr is None:
      p = <long double*>pyx_calloc(1,sizeof(long double))
      self.p = <void*>p
      if isinstance(value,CObject):
        if isinstance(value,_CLDouble):
          cobject = value
          p[0] = (<long double*>cobject.p)[0]
        else:
          value.init_CLDouble(self)
      elif value is not None:
        p[0] = value
      else:
        p[0] = 0
      self.malloced = True
    else:
      c_addr = addr
      self.p = <void*>c_addr
      self.malloced = False
  def __int__( self ):
    cdef long double *p
    assert self.p != NULL
    p = <long double*>self.p
    return int(p[0])
  def __float__( self ):
    cdef long double *p
    assert self.p != NULL
    p = <long double*>self.p
    return float(p[0])
  def __add__( x, y ):
    cdef long double val
    cdef _CLDouble self
    if not isinstance(x,CLDouble):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<long double*>self.p)[0]
    val = val + y
    return CLDouble(val)
  def __sub__( x, y ):
    cdef long double val
    cdef _CLDouble self
    if not isinstance(x,CLDouble):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<long double*>self.p)[0]
    val = val - y
    return CLDouble(val)
  def __mul__( x, y ):
    cdef long double val
    cdef _CLDouble self
    if not isinstance(x,CLDouble):
      x,y = y,x
    self = x
    assert self.p != NULL
    val = (<long double*>self.p)[0]
    val = val + y
    return CLDouble(val)
  def __repr__( self ):
    cdef long c_addr
    cdef long double c_val
    c_addr = <long>self.p
    value = ""
    if c_addr != 0:
      c_val = (<long double*>self.p)[0]
      value = ", value = %s" % str( c_val )
    return "%s( addr = %s%s )" % (self.__class__.__name__, hex(c_addr), value)
  def set_value( self, value ):
    if isinstance(value,CObject):
      value.init_CLDouble(self)
    else:
      (<long double*>self.p)[0] = value
  def get_value( self ):
    return (<long double*>self.p)[0]
  def to_CLDouble(self):
    return self
  def init_from( self, _CLDouble cobject ):
    " init self from a CLDouble instance "
#    if not self.is_compatible(cobject):
    if not isinstance( cobject, CLDouble ):
      raise TypeError("%s cannot be set from %s" % (self.__class__, cobject))
    (<long double*>self.p)[0] = (<long double*>cobject.p)[0]
  def get_basetype( self ):
    return CLDouble
#  def sizeof( self ):
#    return sizeof(long double)
#  def is_compatible( self, _CObject cobject ):
#    return isinstance( cobject, CLDouble )
  def __str__( self ):
    cdef long c_addr
    cdef long double c_val
    c_addr = <long>self.p
    value = ""
    if c_addr != 0:
      c_val = (<long double*>self.p)[0]
      value = str( c_val )
    return value
  def from_CChar( self, _CChar cobject ):
    " set self from a CChar instance"
    (<long double*>self.p)[0] = <long double>(<char*>cobject.p)[0]
  def init_CChar( self, _CChar cobject ):
    " set a CChar instance from self "
    (<char*>cobject.p)[0] = <char>(<long double*>self.p)[0]
  def to_CChar( self ):
    " cast self to new CChar instance "
    cdef long double c_src
    cdef char c_tgt
    cdef _CLDouble py_src
    cdef _CChar py_tgt
    c_src = (<long double*>self.p)[0]
    c_tgt = <char>c_src
    py_tgt = CChar()
    (<char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CSChar( self, _CSChar cobject ):
    " set self from a CSChar instance"
    (<long double*>self.p)[0] = <long double>(<signed char*>cobject.p)[0]
  def init_CSChar( self, _CSChar cobject ):
    " set a CSChar instance from self "
    (<signed char*>cobject.p)[0] = <signed char>(<long double*>self.p)[0]
  def to_CSChar( self ):
    " cast self to new CSChar instance "
    cdef long double c_src
    cdef signed char c_tgt
    cdef _CLDouble py_src
    cdef _CSChar py_tgt
    c_src = (<long double*>self.p)[0]
    c_tgt = <signed char>c_src
    py_tgt = CSChar()
    (<signed char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUChar( self, _CUChar cobject ):
    " set self from a CUChar instance"
    (<long double*>self.p)[0] = <long double>(<unsigned char*>cobject.p)[0]
  def init_CUChar( self, _CUChar cobject ):
    " set a CUChar instance from self "
    (<unsigned char*>cobject.p)[0] = <unsigned char>(<long double*>self.p)[0]
  def to_CUChar( self ):
    " cast self to new CUChar instance "
    cdef long double c_src
    cdef unsigned char c_tgt
    cdef _CLDouble py_src
    cdef _CUChar py_tgt
    c_src = (<long double*>self.p)[0]
    c_tgt = <unsigned char>c_src
    py_tgt = CUChar()
    (<unsigned char*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CShort( self, _CShort cobject ):
    " set self from a CShort instance"
    (<long double*>self.p)[0] = <long double>(<short*>cobject.p)[0]
  def init_CShort( self, _CShort cobject ):
    " set a CShort instance from self "
    (<short*>cobject.p)[0] = <short>(<long double*>self.p)[0]
  def to_CShort( self ):
    " cast self to new CShort instance "
    cdef long double c_src
    cdef short c_tgt
    cdef _CLDouble py_src
    cdef _CShort py_tgt
    c_src = (<long double*>self.p)[0]
    c_tgt = <short>c_src
    py_tgt = CShort()
    (<short*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUShort( self, _CUShort cobject ):
    " set self from a CUShort instance"
    (<long double*>self.p)[0] = <long double>(<unsigned short*>cobject.p)[0]
  def init_CUShort( self, _CUShort cobject ):
    " set a CUShort instance from self "
    (<unsigned short*>cobject.p)[0] = <unsigned short>(<long double*>self.p)[0]
  def to_CUShort( self ):
    " cast self to new CUShort instance "
    cdef long double c_src
    cdef unsigned short c_tgt
    cdef _CLDouble py_src
    cdef _CUShort py_tgt
    c_src = (<long double*>self.p)[0]
    c_tgt = <unsigned short>c_src
    py_tgt = CUShort()
    (<unsigned short*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CInt( self, _CInt cobject ):
    " set self from a CInt instance"
    (<long double*>self.p)[0] = <long double>(<int*>cobject.p)[0]
  def init_CInt( self, _CInt cobject ):
    " set a CInt instance from self "
    (<int*>cobject.p)[0] = <int>(<long double*>self.p)[0]
  def to_CInt( self ):
    " cast self to new CInt instance "
    cdef long double c_src
    cdef int c_tgt
    cdef _CLDouble py_src
    cdef _CInt py_tgt
    c_src = (<long double*>self.p)[0]
    c_tgt = <int>c_src
    py_tgt = CInt()
    (<int*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CUInt( self, _CUInt cobject ):
    " set self from a CUInt instance"
    (<long double*>self.p)[0] = <long double>(<unsigned int*>cobject.p)[0]
  def init_CUInt( self, _CUInt cobject ):
    " set a CUInt instance from self "
    (<unsigned int*>cobject.p)[0] = <unsigned int>(<long double*>self.p)[0]
  def to_CUInt( self ):
    " cast self to new CUInt instance "
    cdef long double c_src
    cdef unsigned int c_tgt
    cdef _CLDouble py_src
    cdef _CUInt py_tgt
    c_src = (<long double*>self.p)[0]
    c_tgt = <unsigned int>c_src
    py_tgt = CUInt()
    (<unsigned int*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLong( self, _CLong cobject ):
    " set self from a CLong instance"
    (<long double*>self.p)[0] = <long double>(<long*>cobject.p)[0]
  def init_CLong( self, _CLong cobject ):
    " set a CLong instance from self "
    (<long*>cobject.p)[0] = <long>(<long double*>self.p)[0]
  def to_CLong( self ):
    " cast self to new CLong instance "
    cdef long double c_src
    cdef long c_tgt
    cdef _CLDouble py_src
    cdef _CLong py_tgt
    c_src = (<long double*>self.p)[0]
    c_tgt = <long>c_src
    py_tgt = CLong()
    (<long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CULong( self, _CULong cobject ):
    " set self from a CULong instance"
    (<long double*>self.p)[0] = <long double>(<unsigned long*>cobject.p)[0]
  def init_CULong( self, _CULong cobject ):
    " set a CULong instance from self "
    (<unsigned long*>cobject.p)[0] = <unsigned long>(<long double*>self.p)[0]
  def to_CULong( self ):
    " cast self to new CULong instance "
    cdef long double c_src
    cdef unsigned long c_tgt
    cdef _CLDouble py_src
    cdef _CULong py_tgt
    c_src = (<long double*>self.p)[0]
    c_tgt = <unsigned long>c_src
    py_tgt = CULong()
    (<unsigned long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLLong( self, _CLLong cobject ):
    " set self from a CLLong instance"
    (<long double*>self.p)[0] = <long double>(<long long*>cobject.p)[0]
  def init_CLLong( self, _CLLong cobject ):
    " set a CLLong instance from self "
    (<long long*>cobject.p)[0] = <long long>(<long double*>self.p)[0]
  def to_CLLong( self ):
    " cast self to new CLLong instance "
    cdef long double c_src
    cdef long long c_tgt
    cdef _CLDouble py_src
    cdef _CLLong py_tgt
    c_src = (<long double*>self.p)[0]
    c_tgt = <long long>c_src
    py_tgt = CLLong()
    (<long long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CULLong( self, _CULLong cobject ):
    " set self from a CULLong instance"
    (<long double*>self.p)[0] = <long double>(<unsigned long long*>cobject.p)[0]
  def init_CULLong( self, _CULLong cobject ):
    " set a CULLong instance from self "
    (<unsigned long long*>cobject.p)[0] = <unsigned long long>(<long double*>self.p)[0]
  def to_CULLong( self ):
    " cast self to new CULLong instance "
    cdef long double c_src
    cdef unsigned long long c_tgt
    cdef _CLDouble py_src
    cdef _CULLong py_tgt
    c_src = (<long double*>self.p)[0]
    c_tgt = <unsigned long long>c_src
    py_tgt = CULLong()
    (<unsigned long long*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CFloat( self, _CFloat cobject ):
    " set self from a CFloat instance"
    (<long double*>self.p)[0] = <long double>(<float*>cobject.p)[0]
  def init_CFloat( self, _CFloat cobject ):
    " set a CFloat instance from self "
    (<float*>cobject.p)[0] = <float>(<long double*>self.p)[0]
  def to_CFloat( self ):
    " cast self to new CFloat instance "
    cdef long double c_src
    cdef float c_tgt
    cdef _CLDouble py_src
    cdef _CFloat py_tgt
    c_src = (<long double*>self.p)[0]
    c_tgt = <float>c_src
    py_tgt = CFloat()
    (<float*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CDouble( self, _CDouble cobject ):
    " set self from a CDouble instance"
    (<long double*>self.p)[0] = <long double>(<double*>cobject.p)[0]
  def init_CDouble( self, _CDouble cobject ):
    " set a CDouble instance from self "
    (<double*>cobject.p)[0] = <double>(<long double*>self.p)[0]
  def to_CDouble( self ):
    " cast self to new CDouble instance "
    cdef long double c_src
    cdef double c_tgt
    cdef _CLDouble py_src
    cdef _CDouble py_tgt
    c_src = (<long double*>self.p)[0]
    c_tgt = <double>c_src
    py_tgt = CDouble()
    (<double*>py_tgt.p)[0] = c_tgt
    return py_tgt
  def from_CLDouble( self, _CLDouble cobject ):
    " set self from a CLDouble instance"
    (<long double*>self.p)[0] = <long double>(<long double*>cobject.p)[0]
  def init_CLDouble( self, _CLDouble cobject ):
    " set a CLDouble instance from self "
    (<long double*>cobject.p)[0] = <long double>(<long double*>self.p)[0]
CLDouble = Meta('CLDouble', (_CLDouble,), {} )
CLDouble.basetype = CLDouble
CLDouble.sizeof = sizeof(long double)
