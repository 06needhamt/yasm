/*
 * NASM-compatible lex lexer
 *
 *  Copyright (C) 2001  Peter Johnson
 *
 *  This file is part of YASM.
 *
 *  YASM is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  YASM is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
%{
#include "util.h"
RCSID("$IdPath$");

#include "bitvect.h"

#include "errwarn.h"
#include "intnum.h"
#include "floatnum.h"
#include "expr.h"
#include "symrec.h"

#include "bytecode.h"

#include "arch.h"

#include "bison.h"


#define YY_NEVER_INTERACTIVE	1

#define yylval	nasm_parser_lval

int nasm_parser_lex(void);

extern size_t (*nasm_parser_yyinput) (char *buf, size_t max_size);
#undef YY_INPUT
#define YY_INPUT(b, r, ms)	(r = nasm_parser_yyinput(b, ms))

/* starting size of string buffer */
#define STRBUF_ALLOC_SIZE	128

/* string buffer used when parsing strings/character constants */
static char *strbuf = (char *)NULL;

/* length of strbuf (including terminating NULL character) */
static size_t strbuf_size = 0;

/* last "base" label for local (.) labels */
char *nasm_parser_locallabel_base = (char *)NULL;

/* current line number */
int line_number;

%}
%option noyywrap
%option nounput
%option case-insensitive

%x DIRECTIVE
%s DIRECTIVE2

DIGIT    [0-9]
BINDIGIT [01]
OCTDIGIT [0-7]
HEXDIGIT [0-9a-f]
WS       [ \t\r]

%%

    /* standard decimal integer */
{DIGIT}+ {
    yylval.intn = intnum_new_dec(yytext);
    return INTNUM;
}

    /* 10010011b - binary number */
{BINDIGIT}+b {
    yytext[strlen(yytext)-1] = '\0';  /* strip off 'b' */
    yylval.intn = intnum_new_bin(yytext);
    return INTNUM;
}

    /* 777q - octal number */
{OCTDIGIT}+q {
    yytext[strlen(yytext)-1] = '\0';  /* strip off 'q' */
    yylval.intn = intnum_new_oct(yytext);
    return INTNUM;
}

    /* 0AAh form of hexidecimal number */
{DIGIT}{HEXDIGIT}*h {
    yytext[strlen(yytext)-1] = '\0';  /* strip off 'h' */
    yylval.intn = intnum_new_hex(yytext);
    return INTNUM;
}

    /* $0AA and 0xAA forms of hexidecimal number */
(\${DIGIT}|0x){HEXDIGIT}+ {
    if (yytext[1] == 'x')
	yylval.intn = intnum_new_hex(yytext+2);	/* 0x format, skip 0 and x */
    else
	yylval.intn = intnum_new_hex(yytext+1);	/* $0 format, don't skip 0 */
    return INTNUM;
}

    /* floating point value */
{DIGIT}+\.{DIGIT}*(e[-+]?{DIGIT}+)? {
    yylval.flt = floatnum_new(yytext);
    return FLTNUM;
}

    /* string/character constant values */
["']	{
    int inch, count;
    char endch = yytext[0];

    strbuf = xmalloc(STRBUF_ALLOC_SIZE);

    strbuf_size = STRBUF_ALLOC_SIZE;
    inch = input();
    count = 0;
    while (inch != EOF && inch != endch && inch != '\n') {
	strbuf[count++] = inch;
	if (count >= strbuf_size) {
	    strbuf = realloc(strbuf, strbuf_size + STRBUF_ALLOC_SIZE);
	    if (!strbuf)
		Fatal(FATAL_NOMEM);
	    strbuf_size += STRBUF_ALLOC_SIZE;
	}
	inch = input();
    }

    if (inch == '\n')
	Error(_("unterminated string"));
    else if (inch == EOF)
	Error(_("unexpected end of file in string"));

    strbuf[count] = '\0';

    yylval.str_val = strbuf;
    return STRING;
}

    /* directive: [name value] */
^{WS}*"["	    { BEGIN DIRECTIVE; return '['; }
<DIRECTIVE>"]"	    { BEGIN INITIAL; return ']'; }
<DIRECTIVE2>"]"	    { BEGIN INITIAL; return ']'; }
<DIRECTIVE>\n	    { BEGIN INITIAL; return '\n'; }
<DIRECTIVE2>\n	    { BEGIN INITIAL; return '\n'; }

<DIRECTIVE>[a-z]+   {
    BEGIN DIRECTIVE2;
    yylval.str_val = xstrdup(yytext);
    return DIRECTIVE_NAME;
}
<DIRECTIVE>. {
    Warning(_("ignoring unrecognized character `%s'"),
	    conv_unprint(yytext[0]));
}

    /* override local labels in directive state */
<DIRECTIVE2>\.[a-z0-9_$#@~.?]* {
    yylval.str_val = xstrdup(yytext);
    return ID;
}

    /* size specifiers */
byte	{ yylval.int_info = 1; return BYTE; }
word	{ yylval.int_info = 2; return WORD; }
dword	{ yylval.int_info = 4; return DWORD; }
qword	{ yylval.int_info = 8; return QWORD; }
tword	{ yylval.int_info = 10; return TWORD; }
dqword	{ yylval.int_info = 16; return DQWORD; }

    /* pseudo-instructions */
db	{ yylval.int_info = 1; return DECLARE_DATA; }
dw	{ yylval.int_info = 2; return DECLARE_DATA; }
dd	{ yylval.int_info = 4; return DECLARE_DATA; }
dq	{ yylval.int_info = 8; return DECLARE_DATA; }
dt	{ yylval.int_info = 10; return DECLARE_DATA; }

resb	{ yylval.int_info = 1; return RESERVE_SPACE; }
resw	{ yylval.int_info = 2; return RESERVE_SPACE; }
resd	{ yylval.int_info = 4; return RESERVE_SPACE; }
resq	{ yylval.int_info = 8; return RESERVE_SPACE; }
rest	{ yylval.int_info = 10; return RESERVE_SPACE; }

incbin	{ return INCBIN; }

equ	{ return EQU; }

times	{ return TIMES; }

seg	{ return SEG; }
wrt	{ return WRT; }
near	{ return NEAR; }
short	{ return SHORT; }
far	{ return FAR; }

nosplit	{ return NOSPLIT; }

org	{ return ORG; }

to	{ return TO; }

    /* operand size overrides */
o16	{ yylval.int_info = 16; return OPERSIZE; }
o32	{ yylval.int_info = 32; return OPERSIZE; }
    /* address size overrides */
a16	{ yylval.int_info = 16; return ADDRSIZE; }
a32	{ yylval.int_info = 32; return ADDRSIZE; }

    /* instruction prefixes */
lock	{ return LOCK; }
repne	{ return REPNZ; }
repnz	{ return REPNZ; }
rep	{ return REP; }
repe	{ return REPZ; }
repz	{ return REPZ; }

    /* control, debug, and test registers */
cr4		{ yylval.int_info = 4; return CR4; }
cr[023]		{ yylval.int_info = yytext[2]-'0'; return CRREG_NOTCR4; }
dr[0-367]	{ yylval.int_info = yytext[2]-'0'; return DRREG; }
tr[3-7]		{ yylval.int_info = yytext[2]-'0'; return TRREG; }

    /* floating point, MMX, and SSE registers */
st0	    { yylval.int_info = 0; return ST0; }
st[1-7]	    { yylval.int_info = yytext[2]-'0'; return FPUREG_NOTST0; }
mm[0-7]	    { yylval.int_info = yytext[2]-'0'; return MMXREG; }
xmm[0-7]    { yylval.int_info = yytext[3]-'0'; return XMMREG; }

    /* integer registers */
eax	{ yylval.int_info = 0; return REG_EAX; }
ecx	{ yylval.int_info = 1; return REG_ECX; }
edx	{ yylval.int_info = 2; return REG_EDX; }
ebx	{ yylval.int_info = 3; return REG_EBX; }
esp	{ yylval.int_info = 4; return REG_ESP; }
ebp	{ yylval.int_info = 5; return REG_EBP; }
esi	{ yylval.int_info = 6; return REG_ESI; }
edi	{ yylval.int_info = 7; return REG_EDI; }

ax	{ yylval.int_info = 0; return REG_AX; }
cx	{ yylval.int_info = 1; return REG_CX; }
dx	{ yylval.int_info = 2; return REG_DX; }
bx	{ yylval.int_info = 3; return REG_BX; }
sp	{ yylval.int_info = 4; return REG_SP; }
bp	{ yylval.int_info = 5; return REG_BP; }
si	{ yylval.int_info = 6; return REG_SI; }
di	{ yylval.int_info = 7; return REG_DI; }

al	{ yylval.int_info = 0; return REG_AL; }
cl	{ yylval.int_info = 1; return REG_CL; }
dl	{ yylval.int_info = 2; return REG_DL; }
bl	{ yylval.int_info = 3; return REG_BL; }
ah	{ yylval.int_info = 4; return REG_AH; }
ch	{ yylval.int_info = 5; return REG_CH; }
dh	{ yylval.int_info = 6; return REG_DH; }
bh	{ yylval.int_info = 7; return REG_BH; }

    /* segment registers */
es	{ yylval.int_info = 0; return REG_ES; }
cs	{ yylval.int_info = 1; return REG_CS; }
ss	{ yylval.int_info = 2; return REG_SS; }
ds	{ yylval.int_info = 3; return REG_DS; }
fs	{ yylval.int_info = 4; return REG_FS; }
gs	{ yylval.int_info = 5; return REG_GS; }

    /* operators */
"<<"			{ return LEFT_OP; }
">>"			{ return RIGHT_OP; }
"//"			{ return SIGNDIV; }
"%%"			{ return SIGNMOD; }
"$$"			{ return START_SECTION_ID; }
[-+|^&*/%~$():[\]=,]	{ return yytext[0]; }

    /* special non-local ..@label and labels like ..start */
\.\.[a-z0-9_$#@~.?]+ {
    yylval.str_val = xstrdup(yytext);
    return SPECIAL_ID;
}

    /* local label (.label) */
\.[a-z0-9_$#@~?][a-z0-9_$#@~.?]* {
    if (!nasm_parser_locallabel_base) {
	Warning(_("no non-local label before `%s'"), yytext);
	yylval.str_val = xstrdup(yytext);
    } else {
	yylval.str_val = xmalloc(strlen(yytext) +
				 strlen(nasm_parser_locallabel_base) + 1);
	strcpy(yylval.str_val, nasm_parser_locallabel_base);
	strcat(yylval.str_val, yytext);
    }

    return LOCAL_ID;
}

    /* instructions */
    /* @INSTRUCTIONS@ */

    /* label */
[a-z_?][a-z0-9_$#@~.?]* {
    yylval.str_val = xstrdup(yytext);
    return ID;
}

;.*	;

{WS}+	;

\n	return '\n';

.	{
    Warning(_("ignoring unrecognized character `%s'"),
	    conv_unprint(yytext[0]));
}

